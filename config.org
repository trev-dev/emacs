* Emacs Configuration
#+STARTUP: content
Herein lies my Emacs configuration. Use it well
** Performance Tweaks
Give the garbage collector free-reign at start-up, then take it back to 8M. Use so-long-mode for editor-breaking minified css/js.

#+begin_src emacs-lisp
;; Minimize garbage collection during startup
(setq gc-cons-threshold most-positive-fixnum)

;; Lower threshold back to 8 MiB (default is 800kB)
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold (expt 2 23))))

(setq read-process-output-max (* 1024 1024))

;; Don't die when handling large, minified files
(global-so-long-mode 1)
#+end_src

** Autosaves & Backups
I hate seeing project folders get all cluttered up

#+begin_src emacs-lisp
;; Put autosave files (ie #foo#) and backup files (ie foo~) in ~/.emacs.d/.
(custom-set-variables
 '(auto-save-file-name-transforms '((".*" "~/.emacs.d/autosaves/\\1" t)))
 '(backup-directory-alist '((".*" . "~/.emacs.d/backups/"))))

;; create the autosave dir if necessary, since emacs won't.
(make-directory "~/.emacs.d/autosaves/" t)

(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src

** Package Management
We need packages, so we're going to setup some repos and pre-install use-package for packages later on in this config

#+begin_src emacs-lisp
(require 'package)

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/"))

(setq package-enable-at-startup nil)
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+end_src

** Look & Feel
*** Dired

#+begin_src emacs-lisp
(add-hook 'dired-mode-hook (lambda()
                             (dired-hide-details-mode)))
#+end_src

*** DOOM
Disabled this config while I explore something [[Kaolin][new/different]] :)

Doom's themes and modeline are hard to beat. They're easy to install, highly customizable and hackable. Writing my own theme is easy.

#+begin_src
;; I will write/store my custom doom (and non-doom?) themes here
(add-to-list 'custom-theme-load-path "~/.config/emacs/themes")
(use-package doom-themes
  :ensure t
  :requires all-the-icons
  :config
  ;; global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-material-dark t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; enable custom neotree theme (all-the-icons must be installed!)
  ;; (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
  ;; (doom-themes-treemacs-config)
  ;; corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))

#+end_src

*** Kaolin
#+begin_src emacs-lisp
(use-package kaolin-themes
  :ensure t
  :config
  (load-theme 'kaolin-galaxy t))
#+end_src

*** Emacs
Clear out most of the GUI clutter, display relative line numbers, highlight the line I'm on, smaller left-only fringe, quick yes/no answers, some prog-mode QOL settings as well

#+begin_src emacs-lisp
(require 'icomplete)
(fido-mode 1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(setq display-line-numbers-type 'relative)
(global-visual-line-mode t)
(fringe-mode '(4 . 0))
(setq inhibit-startup-screen t)
(setq initial-scratch-message "")
(defalias 'yes-or-no-p 'y-or-n-p)
(setq browse-url-generic-program "/usr/bin/firefox")
(setq ispell-personal-dictionary "~/.config/emacs/personal-dict.pwd")
(setq ispell-program-name "aspell")
(setq ispell-dictionary "english")
#+end_src

*** Font Setup
I recently discovered [[https://www.jetbrains.com/lp/mono/][JetBrains Mono]] and I'm really enjoying it.

#+begin_src emacs-lisp
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
(add-to-list 'default-frame-alist '(font . "Jetbrains Mono 10" ))

(let ((ligatures `((?-  . ,(regexp-opt '("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->")))
                   (?/  . ,(regexp-opt '("/**" "/*" "///" "/=" "/==" "/>" "//")))
                   (?*  . ,(regexp-opt '("*>" "***" "*/")))
                   (?<  . ,(regexp-opt '("<-" "<<-" "<=>" "<=" "<|" "<||" "<|||::=" "<|>"
                                         "<:" "<>" "<-<" "<<<" "<==" "<<=" "<=<" "<==>"
                                         "<-|" "<<" "<~>" "<=|" "<~~" "<~" "<$>" "<$" "<+>"
                                         "<+" "</>" "</" "<*" "<*>" "<->" "<!--")))
                   (?:  . ,(regexp-opt '(":>" ":<" ":::" "::" ":?" ":?>" ":=")))
                   (?=  . ,(regexp-opt '("=>>" "==>" "=/=" "=!=" "=>" "===" "=:=" "==")))
                   (?!  . ,(regexp-opt '("!==" "!!" "!=")))
                   (?>  . ,(regexp-opt '(">]" ">:" ">>-" ">>=" ">=>" ">>>" ">-" ">=")))
                   (?&  . ,(regexp-opt '("&&&" "&&")))
                   (?|  . ,(regexp-opt '("|||>" "||>" "|>" "|]" "|}" "|=>" "|->" "|=" "||-"
                                         "|-" "||=" "||")))
                   (?.  . ,(regexp-opt '(".." ".?" ".=" ".-" "..<" "...")))
                   (?+  . ,(regexp-opt '("+++" "+>" "++")))
                   (?\[ . ,(regexp-opt '("[||]" "[<" "[|")))
                   (?\{ . ,(regexp-opt '("{|")))
                   (?\? . ,(regexp-opt '("??" "?." "?=" "?:")))
                   (?#  . ,(regexp-opt '("####" "###" "#[" "#{" "#=" "#!" "#:" "#_(" "#_"
                                         "#?" "#(" "##")))
                   (?\; . ,(regexp-opt '(";;")))
                   (?_  . ,(regexp-opt '("_|_" "__")))
                   (?\\ . ,(regexp-opt '("\\" "\\/")))
                   (?~  . ,(regexp-opt '("~~" "~~>" "~>" "~=" "~-" "~@")))
                   (?$  . ,(regexp-opt '("$>")))
                   (?^  . ,(regexp-opt '("^=")))
                   (?\] . ,(regexp-opt '("]#"))))))
  (dolist (char-regexp ligatures)
    (set-char-table-range
      composition-function-table (car char-regexp)
      `([,(cdr char-regexp) 0 font-shape-gstring]))))

(use-package composite
  :hook (prog-mode . auto-composition-mode)
  :init (global-auto-composition-mode -1))
#+end_src

** Utility Packages
Packages that extend and augment emacs in a general way
*** AG
C based file content grepping <3

#+begin_src
(use-package ag :ensure t)
#+end_src

*** Avy
#+begin_src emacs-lisp
(use-package avy
  :ensure t
  :bind ("C-:" . avy-goto-char) ("M-g f" . avy-goto-line) ("M-g w" . avy-goto-word-1)
  :config
  (avy-setup-default))
  #+end_src
*** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))
        dashboard-startup-banner 'logo
        dashboard-items '((projects . 5)
                          (recents . 5)
                          (agenda . 5)
                          (bookmarks . 5))
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-center-content t
        dashboard-set-init-info t)
  (dashboard-setup-startup-hook))
#+end_src
*** Diff-hl
Show me the diffs in the fringe!

#+begin_src emacs-lisp
(use-package diff-hl
  :ensure t
  :after magit
  :init (global-diff-hl-mode)
  :hook ((magit-pre-refresh-hook . diff-hl-magit-pre-refresh)
         (magit-post-refresh-hook . diff-hl-magit-post-refresh)))
#+end_src

*** Edit Server
This one's pretty cheesy. It lets me edit text fields with Emacs in the web browser. It's meant to be used in conjunction with [[https://addons.mozilla.org/en-US/firefox/addon/edit-with-emacs1/][edit with emacs.]]
#+begin_src emacs-lisp
(use-package edit-server
  :ensure t
  :commands edit-server-start
  :init (if after-init-time
              (edit-server-start)
            (add-hook 'after-init-hook
                      #'(lambda() (edit-server-start))))
  :config (setq edit-server-new-frame-alist
                '((name . "Edit with Emacs")
                  (top . 200)
                  (left . 200)
                  (width . 80)
                  (height . 25)
                  (minibuffer . t)
                  (menu-bar-lines . t)
                  (window-system . x))
                edit-server-port 36227))
#+end_src
*** Elfeed

#+begin_src emacs-lisp
(use-package elfeed
  :bind ("C-c e" . elfeed)
  :ensure t)
(use-package elfeed-org
  :ensure t
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/Org/elfeed.org"))
  :after elfeed)
#+end_src

*** Evil!
I like Vim bindings. Many of the plugins included here are commonly enjoyed in Vim. Most of them can be looked up [[https://www.emacswiki.org/emacs/Evil#h5o-6][in the wiki]].

#+begin_src
(use-package evil
  :ensure t
  :init
  (setq evil-undo-system 'undo-tree)
  (setq evil-want-keybinding nil)
  (setq evil-shift-width tab-width)
  (evil-mode 1)
  :custom
  evil-visual-state-cursor 'hbar)

;; Easily wrap selections/motions in pairs
(use-package evil-surround
  :requires evil
  :ensure t
  :config
  (global-evil-surround-mode 1))

;; A collection of vim-rebinds that evil doesn't cover
(use-package evil-collection
  :requires evil
  :after evil
  :ensure t
  :config
  (evil-collection-init))

;; Org mode keybind improvements
(use-package evil-org
  :requires evil
  :ensure t
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

;; Highlight text when yanked, popped, deleted or changed with motions. Helps me visually grok what a motion has done.
(use-package evil-goggles
  :requires evil
  :ensure t
  :custom-face
  (evil-goggles-delete-face ((t (:foreground "#620707" :background "#F57373"))))
  (evil-goggles-paste-face ((t (:foreground "#426214" :background "#C3E88D"))))
  (evil-goggles-default-face ((t (:foreground "#002A82" :background "#82AAFF"))))
  :config
  (evil-goggles-mode))

;; Easy commenting
(use-package evil-commentary
  :requires evil
  :ensure t
  :config (evil-commentary-mode))

;; Think Ace Jump, but it's Vim. I've intentionally set the scope to much larger than the default of "after where you are on this line".
(use-package evil-snipe
  :requires evil
  :ensure t
  :config
  (evil-snipe-mode 1)
  (evil-snipe-override-mode 1)
  (setq evil-snipe-scope 'whole-visible)
  (setq evil-snipe-spillover-scope 'whole-buffer))
#+End_src
*** Expand Region
#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+end_src

*** Magit
Magit is one of the biggest reasons why I fell in love with emacs. It's the best keyboard driven "TUI" abstraction of the git command line anywere, period. Better than Fugitive by far. Sorry, Tim Pope.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :config
  (global-set-key (kbd "C-c g") 'magit-status))
#+end_src

*** Mu4e
Setting up mu4e with contexts feels like a pretty massive process. I've decided to load that config from an external file to keep this file sane. Also, I've decided not to expose my email addresses/configs here. Apologies for those who may be looking for an example!

If you're looking for help with mu/4e I strongly suggest checking out [[https://www.youtube.com/watch?v=yZRyEhi4y44&list=PLEoMzSkcN8oM-kA19xOQc8s0gr0PpFGJQ][System Crafters]]
#+begin_src emacs-lisp
(load-file "~/.config/emacs/mu4e-config.el")
#+end_src

*** Ivy
Nicer command completions for emacs. Not as bloated as Helm. Ivy requires 3 packages

#+begin_src
;; Completions with counsel
(use-package counsel
  :ensure t
  :config
  (counsel-mode 1))

;; Search better with swiper
(use-package swiper
  :ensure t
  :config
  (counsel-mode 1))

;; The interface for swiper/counsel
(use-package ivy
  :ensure t
  :requires (counsel swiper)
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  ;; enable this if you want `swiper' to use it
  ;; (setq search-default-mode #'char-fold-to-regexp)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x))
#+end_src

*** Ledger
Knowing what resources you have at your disposal and learning how to budget are powerful things.

#+begin_src emacs-lisp
(use-package ledger-mode
  :hook (ledger-mode . company-mode)
  :custom
  (ledger-report-use-native-highlighting t)
  :ensure t)
(use-package flycheck-ledger
  :ensure t
  :after flycheck)
#+end_src

*** Projectile
Project management. Makes it very easy to quickly switch to a project root (folder with git initialized) and then quickly pull up files or search file contents.

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  ;; (setq projectile-completion-systen 'ivy)
  ;; (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  ;; (define-key projectile-mode-map (kbd "C-c p s s") 'counsel-ag)
  ;; (define-key projectile-mode-map (kbd "C-c p s r") 'counsel-rg)
  ;; (define-key projectile-mode-map (kbd "C-c p s g") 'counsel-grep-or-swiper)
  (setq projectile-project-search-path '(("~/Projects/" . 2) "/srv/www")))
#+end_src

*** RG
#+begin_src emacs-lisp
(progn
  (straight-use-package 'rg)
  (rg-enable-default-bindings))
#+end_src
*** Treemacs

#+begin_src
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after (treemacs evil)
  :ensure t)

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)
#+end_src

*** Undo-Tree
Mostly want undo tree for better redo support for Evil

#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :config (global-undo-tree-mode))
#+end_src

*** Volatile Highlights
#+begin_src emacs-lisp
(use-package volatile-highlights
  :ensure t
  :config
  (vhl/define-extension 'undo-tree 'undo-tree-yank 'undo-tree-move)
  (vhl/install-extension 'undo-tree))
#+end_src

*** VTerm
A real-ish terminal for emacs that doesn't make me hurt inside. Requires =libvterm=. [[https://github.com/jixiuf/emacs-libvterm][Documentation is here]]. This needs to be installed & compiled /after/ magit, because for [[https://github.com/magit/with-editor/issues/86][whatever reason]], attempting to install vterm first breaks magit.

#+begin_src emacs-lisp
(use-package vterm
  :ensure t
  :bind ("C-c t" . vterm))
#+end_src

*** Which-key
What the heck was that keybind again? If you can remember how it starts, which-key can help you find the rest.

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+end_src

** Syntax Support
We're getting into to the language specific stuff now. Much of this is specifically tailored for Shopify, TypeScript and JavaScript development. Many if not all of these features stay out of the way when you're not in the language mode. There's also a very tedious attempt to make all of these disjointed program modes listen to my gosh dang tab-width setting instead of doing their own thing as an insane default.
*** Company Completions
Completions at point!

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map ("<tab>" . company-complete-selection))
  (:map lsp-mode-map ("<tab>" . company-indent-or-complete-common))
  :config
  (setq company-backends '((company-files company-keywords company-capf company-yasnippet)
                           (company-abbrev company-dabbrev)))
  :custom
  (company-idle-delay 0.0))
#+end_src

*** CSS/SCSS

#+begin_src emacs-lisp
(add-hook 'css-mode-hook #'(lambda () (setq-local css-indent-offset 2
                                                  tab-width 2)))
#+end_src

*** Emmet
=.Emmet[data-love="true"]=

#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :config
  (setq emmet-expand-jsx-className t)
  :hook
  (sgml-mode-hook . emmet-mode)
  (css-mode-hook . emmet-mode)
  (web-mode . emmet-mode)
  (svelte-mode . emmet-mode))
#+end_src

*** Flycheck
Linting, mostly for lsp-mode :D. I did not like the default fringe markers as the expect a minimum fringe of 8-16px, so I followed a [[https://emacs.stackexchange.com/questions/36363/how-to-change-flycheck-symbol-like-spacemacs#answer-36373][tip on how to change up the marker]] for a 4px fringe.

#+begin_src emacs-lisp
(define-fringe-bitmap 'flycheck-fringe-bitmap-caret
  (vector #b00000000
          #b00000000
          #b00000000
          #b00000000
          #b00000000
          #b10000000
          #b11000000
          #b11100000
          #b11110000
          #b11100000
          #b11000000
          #b10000000
          #b00000000
          #b00000000
          #b00000000
          #b00000000
          #b00000000))

(use-package flycheck
  :ensure t
  :hook
    (lsp-mode . flycheck-mode)
    (ledger-mode . flycheck-mode)
  :bind ("C-c f" . flycheck-mode)
  :config
  (setq flycheck-checker-error-threshold 1000)
  (flycheck-define-error-level 'error
    :severity 100
    :compilation-level 2
    :overlay-category 'flycheck-error-overlay
    :fringe-bitmap 'flycheck-fringe-bitmap-caret
    :fringe-face 'flycheck-fringe-error
    :error-list-face 'flycheck-error-list-error)
  (flycheck-define-error-level 'warning
    :severity 100
    :compilation-level 1
    :overlay-category 'flycheck-warning-overlay
    :fringe-bitmap 'flycheck-fringe-bitmap-caret
    :fringe-face 'flycheck-fringe-warning
    :warning-list-face 'flycheck-warning-list-warning)
  (flycheck-define-error-level 'info
    :severity 100
    :compilation-level 1
    :overlay-category 'flycheck-info-overlay
    :fringe-bitmap 'flycheck-fringe-bitmap-caret
    :fringe-face 'flycheck-fringe-info
    :info-list-face 'flycheck-info-list-info))
#+end_src

*** Highlight Indent Guides
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :ensure t
  :custom
  (highlight-indent-guides-method 'character)
  (highlight-indent-guides-bitmap-function 'highlight-indent-guides--bitmap-line)
  (highlight-indent-guides-responsive 'top))
#+end_src
*** GoLang
#+begin_src emacs-lisp
(use-package go-mode
  :ensure t
  :mode "\\.go\\'")
#+end_src
*** Java

#+begin_src emacs-lisp
(use-package lsp-java
  :ensure t
  :after lsp-mode)

(use-package gradle-mode
  :ensure t)

(defun set-java-prefs ()
  "Preferences for java-mode"
  (setq-local tab-width 4
              c-indent-offset 4
              indent-tabs-mode t)
  (lsp)
  (gradle-mode))
(add-hook 'java-mode-hook 'set-java-prefs)
#+end_src

*** LSP
The meat and potatoes of the modern text editor turned IDE, all thanks to Microsoft doing an open source thing with VSCode.

#+begin_src emacs-lisp
(use-package lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (css-mode . lsp)
         (go-mode . lsp-deferred)
         (html-mode . lsp)
         (js-mode . lsp)
         (json-mode . lsp)
         (python-mode . lsp-deferred)
         (php-mode . lsp)
         (rjsx-mode . lsp)
         (rust-mode . lsp)
         (scss-mode . lsp)
         (shopify-mode . lsp)
         (svelte-mode . lsp)
         (typescript-mode . lsp)
         (vue-mode . lsp)
         (yaml-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration)
         (lsp-mode . (lambda()
                       (display-line-numbers-mode)
                       (hl-line-mode))))
  :custom
  ;; Please don't log garbage in my project folders
  (lsp-rust-analyzer-server-display-inlay-hints)
  (lsp-rust-analyzer-inlay-hints-mode t)
  (lsp-clients-typescript-server-args '("--stdio" "--tsserver-log-file" "/dev/stderr"))
  :commands lsp)

(with-eval-after-load 'lsp-mode
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\]env' [/\\]__pycache__'"))

(use-package lsp-treemacs
  :bind ("M-j" . lsp-treemacs-symbols) ("M-e" . lsp-treemacs-errors-list)
  :commands lsp-treemacs-errors-list lsp-treemacs-symbols
  :custom (lsp-treemacs-sync-mode 1))

(use-package lsp-ui
  :ensure
  :custom
  (lsp-ui-peek-always-show t)
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-show-with-cursor t)
  (lsp-ui-sideline-show-hover nil)
  (lsp-ui-imenu-window-width 350))
#+end_src

*** Markdown
The free software documentation language of the Internet.

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

*** Org
Customizations for what is one of the best features that emacs comes with. If we weren't so hung up on Markdown for developer docs, I'd use this mode for everything doc related. Yes, I can export an org file. If I want to track two files, that is. The fancy font-size setup is stolen from [[https://github.com/daviwil/emacs-from-scratch][Emacs from Scratch]] by [[https://www.youtube.com/c/SystemCrafters][System Crafters]]. Check them out :)

#+begin_src emacs-lisp
(use-package org
  :ensure t
  :hook (org-mode . (lambda()
                      (org-indent-mode)
                      (yas-minor-mode)
                      (org-clock-persistence-insinuate)))
  :config
  (require 'ox-md nil t)
  :bind
  ("C-c a" . org-agenda)
  (:map org-mode-map ("C-c t" . org-table-export))
  :custom
  (org-fontify-quote-and-verse-blocks t)
  (org-directory "~/Org")
  (org-log-done 'time)
  (org-log-into-drawer t)
  (org-enforce-todo-dependencies t)
  (org-enforce-todo-checkbox-dependencies t)
  (org-src-preserve-indentation t)
  (org-clock-persist 'history)
  (org-agenda-block-separator "──────────")
  (org-duration-format '(("h" . nil) (special . 2)))
  (org-clock-total-time-cell-format "%s")
  (org-agenda-files '("~/Org"))
  (org-tag-alist '(
                   (:startgroup)
                   ; Put mutually exclusive tags here
                   (:endgroup)
                   ("@home" . ?H)
                   ("@work" . ?W)
                   ("urgent" . ?U)
                   ("learning" . ?l)
                   ("foss" . ?f)
                   ("blog" . ?b)
                   ("idea" . ?i)))
  (org-todo-keywords `((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
                       (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)"
                       "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

  (org-agenda-custom-commands '(("d" "Dashboard"
                                 ((agenda "" ((org-deadline-warning-days 7)))
                                  (todo "NEXT"
                                    ((org-agenda-overriding-header "Next Tasks")))
                                  (tags-todo "agenda/ACTIVE"
                                    ((org-agenda-overriding-header "Active Projects")))))

                                ("n" "Next Tasks"
                                 ((todo "NEXT"
                                        ((org-agenda-overriding-header "Next Tasks")))))

                                ("U" "Urgent Tasks" tags-todo "+urgent")

                                ;; Low-effort next actions
                                ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
                                 ((org-agenda-overriding-header "Low Effort Tasks")
                                  (org-agenda-max-todos 20)
                                  (org-agenda-files org-agenda-files)))

                                ("w" "Workflow Status"
                                 ((todo "WAIT"
                                        ((org-agenda-overriding-header "Waiting on External")
                                         (org-agenda-files org-agenda-files)))
                                  (todo "REVIEW"
                                        ((org-agenda-overriding-header "In Review")
                                         (org-agenda-files org-agenda-files)))
                                  (todo "PLAN"
                                        ((org-agenda-overriding-header "In Planning")
                                         (org-agenda-todo-list-sublevels nil)
                                         (org-agenda-files org-agenda-files)))
                                  (todo "BACKLOG"
                                        ((org-agenda-overriding-header "Project Backlog")
                                         (org-agenda-todo-list-sublevels nil)
                                         (org-agenda-files org-agenda-files)))
                                  (todo "READY"
                                        ((org-agenda-overriding-header "Ready for Work")
                                         (org-agenda-files org-agenda-files)))
                                  (todo "ACTIVE"
                                        ((org-agenda-overriding-header "Active Projects")
                                         (org-agenda-files org-agenda-files)))
                                  (todo "COMPLETED"
                                        ((org-agenda-overriding-header "Completed Projects")
                                         (org-agenda-files org-agenda-files)))
                                  (todo "CANC"
                                        ((org-agenda-overriding-header "Cancelled Projects")
                                         (org-agenda-files org-agenda-files))))))))

(straight-use-package '(org-view-mode :type git :host github :repo "amno1/org-view-mode"
                                      :fork (:host github :repo "trev-dev/org-view-mode")))


(use-package org-bullets
  :ensure t
  :custom
  (org-bullets-bullet-list '(
                             "◉" "○" "•" "·"
                             ;;"" "❯" "»" "›"
                             ))
  ;; :config
  ;; ;; Set faces for heading levels
  ;; (dolist (face '((org-level-1 . 1.2)
  ;;                 (org-level-2 . 1.1)
  ;;                 (org-level-3 . 1.05)
  ;;                 (org-level-4 . 1.0)
  ;;                 (org-level-5 . 1.1)
  ;;                 (org-level-6 . 1.1)
  ;;                 (org-level-7 . 1.1)
  ;;                 (org-level-8 . 1.1)))
  ;;   (set-face-attribute (car face) nil :weight 'semi-bold :height (cdr face)))
  :hook
  (org-mode . (lambda () (org-bullets-mode 1))))

(use-package ox-gfm
  :requires org
  :ensure t)

(defun org-visual-fill-setup()
  "Center the column 100 characters wide"
  (setq-local visual-fill-column-width 100
              visual-fill-column-center-text nil)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :ensure t
  :hook (org-mode . org-visual-fill-setup)
  :bind ("C-c v" . visual-fill-column-mode))


(use-package org-alert
  :ensure t
  :custom
  (alert-default-style 'libnotify)
  :config
  (org-alert-enable))

#+end_src

**** Custom Clock Table
I decided to write a [[file:td-custom-clocktable.el?ts=2][custom clocktable formatter]]. I wanted a neat and tidy way to lay out the hours that I've worked, vs how much effort they should have taken & what that time should be worth when I invoice. I feel like this table is more useful for reporting to certain subcontracts.

#+begin_src emacs-lisp
(load-file "~/.config/emacs/td-custom-clocktable.el")
#+end_src

Here's an example:
#+BEGIN: clocktable :scope ("clocktable-example.org") :maxlevel 3 :properties ("Comment" "Effort") :formatter td/custom-clocktable
#+CAPTION: Clock summary at [2022-01-13 Thu 17:57]
| Task              | Est   | Time   | Billable | Comment                |
|-------------------+-------+--------+----------+------------------------|
| Client            |       | 8.00h  | $520.00  |                        |
| — Task B          |       | 2.00h  | $130.00  | This is taking a while |
| — Task A          |       | 6.00h  | $390.00  |                        |
|-------------------+-------+--------+----------+------------------------|
| Client B          |       | 12.43h | $807.95  |                        |
| — Special Project |       | 12.00h | $780.00  |                        |
| —— Task C         | 9.00h | 8.00h  | $520.00  |                        |
| —— Task D         |       | 4.00h  | $260.00  |                        |
| — Unrelated Task  |       | 0.43h  | $27.95   |                        |
|-------------------+-------+--------+----------+------------------------|
| Totals            |       | 20.43h | $1327.95 |                        |
#+END

*** PHP

#+begin_src emacs-lisp
(define-derived-mode php-mode web-mode "PHP"
  "I just want web-mode highlighting with .svelte files")
(defun get-intelephense-key ()
  "Get the intelephense key from a file"
  (with-temp-buffer
    (insert-file-contents "~/Documents/intelephense.txt")
    (buffer-string)))

(provide 'php-mode)
(add-to-list 'auto-mode-alist '("\\.php\\'" . php-mode))
(add-to-list 'auto-mode-alist '("\\.twig\\'" . php-mode))
#+end_src

*** Prettier
An opinionated way to clean up my web-dev code quickly.

#+begin_src emacs-lisp
(use-package prettier-js
  :ensure t)
#+end_src

*** Prog Mode
A few settings that are useful in programming buffers

#+begin_src emacs-lisp
(defun td/toggle-indent-tabs-mode ()
  "Toggle `indent-tabs-mode'."
  (interactive)
  (setq-local indent-tabs-mode (not indent-tabs-mode)))

(defun td/infer-indentation-style ()
  ;; if our source file uses tabs, we use tabs, if spaces spaces, and if
  ;; neither, we use the current indent-tabs-mode
  (let ((space-count (how-many "^  "))
        (tab-count (how-many "^\t")))
    (if (> space-count tab-count)
        (setq indent-tabs-mode nil))
    (if (> tab-count space-count)
        (setq indent-tabs-mode t))))

(defun td/prog-mode-settings ()
  (setq whitespace-style '(face tabs tab-mark trailing))
  (setq-local fill-column 80)
  (setq-local show-trailing-whitespace t)
  (display-line-numbers-mode)
  (hl-line-mode)
  (highlight-indent-guides-mode)
  (display-fill-column-indicator-mode)
  (electric-pair-local-mode)
  (local-set-key (kbd "<RET>") 'newline-and-indent)
  (local-set-key (kbd "C-c i") 'td/toggle-indent-tabs-mode)
  (yas-minor-mode)
  (td/infer-indentation-style)
  (whitespace-mode))

;; I want a way to tab over relative similar tab-to-tab-stop
(setq indent-tabs-mode nil)
(setq standard-indent 2)
(setq backward-delete-char-untabify-method 'hungry)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq-default evil-shift-width 2)
(setq-default electric-indent-inhibit t)

(add-hook 'prog-mode-hook 'td/prog-mode-settings)
#+end_src

*** Python
<3 Python

#+begin_src emacs-lisp
(use-package pyvenv :ensure t)
(use-package pipenv
  :ensure t
  :hook (python-mode . pipenv-mode))
#+end_src

*** Rainbow Delimiters
This comes in handier than you think it would. Especially with these (lisp '((config . files)))

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

*** Rainbow Mode
LSP-Mode covers making visual representations of hex color codes almost everywhere I need it. For everywhere else there's rainbow-mode

#+begin_src emacs-lisp
(use-package rainbow-mode :ensure t)
#+end_src

*** Rust
#+begin_src emacs-lisp
(use-package rust-mode
  :ensure t
  :custom (rust-format-on-save t)
  :bind (:map rust-mode-map ("C-c c r" . rust-run) ("C-c c a r" . td/rust-run-args)))
(defun td/rust-run-args (s)
  (interactive "sOptional Args:")
  (rust--compile (concat "%s run " s) rust-cargo-bin))
#+end_src
*** Shopify Mode
This is where I turn emacs into a usuable IDE for Shopify themes. I use regexp to tell emacs to use s/css-mode for css liquid, then register an LSP client for the [[https://shopify.dev/themes/tools/theme-check#using-theme-check-in-other-editors][theme-check-language-server]].

#+begin_src emacs-lisp
                                        ; Derive liquid-mode from web-mode
(define-derived-mode shopify-mode web-mode "Shopify"
  "Use web mode to highlight shopify liquid files")
(provide 'shopify-mode)

(add-to-list 'auto-mode-alist '("\\.liquid\\'" . shopify-mode))

(defvar liquid-electric-pairs '((?% . ?%)) "Electric pairs for liquid syntax.")

(defun liquid-add-electric-pairs ()
  (setq-local electric-pair-pairs (append electric-pair-pairs liquid-electric-pairs))
  (setq-local electric-pair-text-pairs electric-pair-pairs))

(add-hook 'shopify-mode-hook #'liquid-add-electric-pairs)

;; Shopify template lsp with theme-check
(with-eval-after-load 'lsp-mode
  (add-to-list 'lsp-language-id-configuration
               '(shopify-mode . "shopify"))

  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection "theme-check-language-server")
                    :activation-fn (lsp-activate-on "shopify")
                    :server-id 'theme-check)))
#+end_src

*** Svelte
Fake-out a "svelte-mode" for the purposes of activating lsp-mode with the svelte-language-server. I'm extending web-mode because it highlights =.svelte= files well.

#+begin_src emacs-lisp
(define-derived-mode svelte-mode web-mode "Svelte"
  "I just want web-mode highlighting with .svelte files")
(provide 'svelte-mode)
(add-to-list 'auto-mode-alist '("\\.svelte\\'" . svelte-mode))
#+end_src

*** Treesitter
Tree-sitter is an impressive project. It delivers exceptionally rich syntax highlighting for things like emacs/vim. A little tricky to theme, though, as it has a billion font lock faces and every tree-sitter syntax config may or may not use them the same way. I try to avoid looking a gift horse in the mouth.

#+begin_src emacs-lisp
(use-package tree-sitter
  :ensure t
  :config
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
(use-package tree-sitter-langs :ensure t)
#+end_src

*** TypeScript & JavaScript
Use tide-mode for all things TS/JS.

#+begin_src emacs-lisp
;; Syntax highlighting starts with rjsx-mode before it's made better by tree sitter
(use-package rjsx-mode :ensure t)

(use-package jsdoc
  :straight (jsdoc :type git :host github :repo "isamert/jsdoc.el"))
(use-package typescript-mode
  :ensure t)
(setq js-indent-level 2)
(setq typescript-indent-level 2)
#+end_src

*** VueJS

#+begin_src emacs-lisp
(define-derived-mode vue-mode web-mode "VueJS"
  "I just want web-mode highlighting with .svelte files")
(provide 'vue-mode)
(add-to-list 'auto-mode-alist '("\\.vue\\'" . vue-mode))
#+end_src

*** Web Mode
There isn't a much better catch-all for web template syntax support than web-mode. It works well with Liquid syntax files. It also comes with it's own divergent, insane defaults that I have to choke out.

#+begin_src emacs-lisp
(defun customize-web-mode ()
  "Customizations for web mode"
  (setq web-mode-enable-auto-pairing nil
        web-mode-enable-auto-quoting nil
        web-mode-enable-auto-indentation nil
        web-mode-style-padding tab-width
        web-mode-script-padding tab-width)
  (add-to-list 'web-mode-indentation-params '("lineup-args" . nil))
  (add-to-list 'web-mode-indentation-params '("lineup-calls" . nil))
  (add-to-list 'web-mode-indentation-params '("lineup-concats" . nil))
  (add-to-list 'web-mode-indentation-params '("lineup-ternary" . nil)))

(use-package web-mode
  :ensure t
  :hook
  (web-mode . customize-web-mode)
  :mode
  ("\\.html\\'" . web-mode))
#+end_src

*** YAML
YAML's a really nice way to configure software, containers and projects. I use it when I can.

#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t)
#+end_src

*** Yasnippet
Snippets! They're helpful.

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (yas-reload-all)
  :custom
  (yas-snippet-dirs '("~/.config/emacs/yasnippets")))

(use-package yasnippet-snippets
  :ensure t)
#+end_src
