* Emacs Configuration
:PROPERTIES:
#+STARTUP: overview
:END:
Herein lies my Emacs configuration. Use it well. Be sure to check out the [[#about-this-config][about section]] for alternate ways to use this repository.

** Contents
:PROPERTIES:
:TOC:      :include siblings :depth 3 :force (nothing) :ignore (nothing) :local (nothing)
:END:
:CONTENTS:
- [[#general-settings][General Settings]]
- [[#package-configuration][Package Configuration]]
  - [[#bootstrapping][Bootstrapping]]
  - [[#look--feel][Look & Feel]]
    - [[#all-the-icons][All The Icons]]
    - [[#dired][Dired]]
    - [[#doom-themes][Doom Themes]]
    - [[#font-setup][Font Setup]]
    - [[#telephone-line][Telephone Line]]
  - [[#utility-packages][Utility Packages]]
    - [[#avy][Avy]]
    - [[#completions][Completions]]
    - [[#dashboard][Dashboard]]
    - [[#diff-hl][Diff-hl]]
    - [[#elfeed][Elfeed]]
    - [[#expand-region][Expand Region]]
    - [[#exec-path][Exec Path]]
    - [[#hydra][Hydra]]
    - [[#magit][Magit]]
    - [[#mu4e][Mu4e]]
    - [[#ledger][Ledger]]
    - [[#sensitive-mode][Sensitive Mode]]
    - [[#rg][RG]]
    - [[#undo-tree][Undo-Tree]]
    - [[#which-key][Which-key]]
  - [[#syntax-support][Syntax Support]]
    - [[#cssscss][CSS/SCSS]]
    - [[#emmet][Emmet]]
    - [[#flycheck][Flycheck]]
    - [[#golang][GoLang]]
    - [[#lsp-mode][LSP Mode]]
    - [[#markdown][Markdown]]
    - [[#org][Org]]
    - [[#php][PHP]]
    - [[#prettier][Prettier]]
    - [[#prog-mode][Prog Mode]]
    - [[#python][Python]]
    - [[#rainbow-delimiters][Rainbow Delimiters]]
    - [[#rainbow-mode][Rainbow Mode]]
    - [[#rust][Rust]]
    - [[#shopify-mode][Shopify Mode]]
    - [[#svelte][Svelte]]
    - [[#treesitter][Treesitter]]
    - [[#typescript--javascript][TypeScript & JavaScript]]
    - [[#vuejs][VueJS]]
    - [[#web-mode][Web Mode]]
    - [[#yaml][YAML]]
    - [[#yasnippet][Yasnippet]]
  - [[#install-prune--configure][Install, Prune & Configure]]
- [[#about-this-config][About This Config]]
  - [[#installation][Installation]]
  - [[#current-mindset][Current Mindset]]
  - [[#licenses][Licenses]]
:END:
** General Settings
Give the garbage collector free-reign at start-up, then take it back to 8M. Use so-long-mode for editor-breaking minified css/js.

#+begin_src elisp :tangle yes
;; Minimize garbage collection during startup
(setq gc-cons-threshold most-positive-fixnum)

;; Lower threshold back to 8 MiB (default is 800kB)
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold (expt 2 23))))

(setq read-process-output-max (* 1024 1024))

;; Don't die when handling large, minified files
(global-so-long-mode 1)

;; For native compilation with Emacs 28+
(setq comp-deferred-compilation t)
#+end_src

Clear out most of the GUI clutter, display relative line numbers, highlight the line I'm on, smaller left-only fringe, quick yes/no answers, some prog-mode QOL settings as well.

#+begin_src elisp :tangle yes
;; Interface
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(blink-cursor-mode 1)
(setq display-line-numbers-type 'relative
      inhibit-startup-screen t
      initial-scratch-message ""
      history-length 25
      sentence-end-double-space nil
      visible-bell t)
(global-visual-line-mode 1)
(recentf-mode 1)
(save-place-mode 1)
(global-auto-revert-mode 1)
(fringe-mode '(4 . 0))
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

Set up the dictionary and preferred browser.

#+begin_src elisp :tangle yes
;; Spelling
(setq ispell-personal-dictionary "~/.config/emacs/personal-dict.pwd")
(setq ispell-program-name "aspell")
(setq ispell-dictionary "english")

;; Browser
(setq browse-url-generic-program "/usr/bin/firefox")
#+end_src

I hate seeing project folders get all cluttered up. Let's move autosaves and backups somewhere else.

#+begin_src elisp :tangle yes
;; Put autosave files (ie #foo#) and backup files (ie foo~) in ~/.emacs.d/.
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/autosaves/" t))
      backup-directory-alist '((".*" . "~/.emacs.d/backups/")))

;; create the autosave dir if necessary, since emacs won't.
(make-directory "~/.emacs.d/autosaves/" t)

(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src

** Package Configuration
In my early Emacs days, I used =use-package=. In my desire to keep learning and move away from confusing (for a beginner) abstractions, I checked out =straight.el= which tries to replace package.el entirely with its own (albeit smaller) abstraction.

While I really admire and appreciate what straight is trying to do, my desire has shifted to a lower-level emacs init while trying to stick to some newer, supported standards.

For now, I'm going to use package.el the un-abstracted way. If I need a git-only package, I will use quelpa, as it is intended to have strong feature-parity with package.el. Quelpa should already be loaded by now in the configuration process as it was needed in [[file:init.el][init.el]].

*** Bootstrapping
Set up repositories.

#+begin_src elisp :tangle yes
(require 'package)
(dolist (repo '(("elpa" . "https://elpa.gnu.org/packages/")
                ("melpa" . "https://melpa.org/packages/")
                ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (add-to-list 'package-archives repo))
#+end_src
 
My init strategy will be to explicitly add to the the =td/package-list= variable while adding my configs (as functions) to =td/package-configs=. At the end of this file both lists will be iterated to install missing packages & call the config functions.

The idea here is I may be able to keep a tight lid on which packages are loaded and be able to choose whatever order I prefer to write this config in, aside from defining this variable and running the loops at the end.

#+begin_src elisp :tangle yes
;; Quelpa & org-tangle-config should have been loaded in `init.el'.
(defvar td/package-list '(quelpa
                          org-tangle-config)
  "My maintained list of packages.")
(defvar td/package-configs nil
  "A list of config functions to call after checking for/installing packages.")
#+end_src

Some helpful functions.

#+begin_src elisp :tangle yes
(defun td/bind-many-keys (conses &optional mode-map)
  "Bind several keybinds using a list of `CONSES'.
Binds will be global unless the optional `MODE-MAP' is specified."
  (dolist (combo conses)
    (if (or (consp mode-map) (keymapp mode-map))
        (define-key mode-map (kbd (car combo)) (cdr combo))
      (if mode-map (warn "Optional %s `MODE-MAP' was invalid: %s" (type-of mode-map) mode-map))
      (global-set-key (kbd (car combo)) (cdr combo)))))
#+end_src

*** Look & Feel
**** All The Icons
I really enjoy these, even if it feels over-the-top.
#+begin_src elisp :tangle yes
(defun td/all-the-icons-conf () "All the icons config."
  (when (display-graphic-p)
    (require 'all-the-icons)))
(add-to-list 'td/package-list 'all-the-icons)
(add-to-list 'td/package-configs #'td/all-the-icons-conf)
#+end_src
**** Dired
#+begin_src elisp :tangle yes
(defun td/all-the-icons-dired-conf () "ATC Dired configuration."
  (with-eval-after-load 'all-the-icons
    (setq all-the-icons-dired-monochrome nil)
    (add-hook 'dired-mode-hook #'(lambda()
                                   (dired-hide-details-mode)
                                   (when (display-graphic-p)
                                     (all-the-icons-dired-mode))))))
(add-to-list 'td/package-list 'all-the-icons-dired)
(add-to-list 'td/package-configs #'td/all-the-icons-dired-conf)
#+end_src

**** Doom Themes
Doom's themes are hard to beat. They're easy to install, highly customizable and hackable. Writing my own theme is easy.
#+begin_src elisp :tangle yes
(defun td/doom-theme-conf () "Doom theme config"
  (require 'doom-themes)
  (add-to-list 'custom-theme-load-path "~/.config/emacs/themes")
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t
        doom-themes-padded-modeline 1)
  (load-theme 'doom-material-dark-devel t)
  (doom-themes-org-config))
(add-to-list 'td/package-list 'doom-themes)
(add-to-list 'td/package-configs #'td/doom-theme-conf)
#+end_src

***** TODO Refactor Custom Theme
I'd like to remove Doom Themes as an abstraction and release "Doom Material Dark" as a standalone thing.

**** Font Setup

#+begin_src elisp :tangle yes
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
(add-to-list 'default-frame-alist '(font . "Source Code Pro 11"))
#+end_src

**** Telephone Line
A simple, but nicer looking modeline
#+begin_src elisp :tangle yes
(defun td/telephone-line-conf ()
  "Telephone line configuration."
  (setq telephone-line-primary-left-separator
        'telephone-line-cubed-left

        telephone-line-secondary-left-separatorn
        'telephone-line-cubed-hollow-left

        telephone-line-primary-right-separator
        'telephone-line-cubed-right

        telephone-line-secondary-right-separator
        'telephone-line-cubed-hollow-right)

  (defface my-emacs
    '((t (:background "#7455ac" :foreground "white" :weight bold)))
    "A face for EMACS that isn't evil.")

  (setq telephone-line-faces
        '((emacs . (my-emacs . telephone-line-accent-inactive))
          (accent . (telephone-line-accent-active
                     . telephone-line-accent-inactive))
          (nil . (mode-line . mode-line-inactive))))

  (telephone-line-defsegment just-emacs () "EMACS")

  (setq telephone-line-lhs
        '((emacs   . (just-emacs))
          (accent  . (telephone-line-vc-segment
                      telephone-line-erc-modified-channels-segment
                      telephone-line-process-segment))
          (nil     . (telephone-line-project-segment
                      telephone-line-buffer-segment))))

  (setq telephone-line-rhs
        '((nil     . (telephone-line-flycheck-segment
                      telephone-line-misc-info-segment))
          (accent  . (telephone-line-major-mode-segment))
          (emacs   . (telephone-line-airline-position-segment))))

  (telephone-line-mode 1))
(add-to-list 'td/package-list 'telephone-line)
(add-to-list 'td/package-configs #'td/telephone-line-conf)
#+end_src
*** Utility Packages
Packages that extend and augment emacs in a general way
**** Avy
#+begin_src elisp :tangle yes
(defun td/avy-conf ()
  "Avy configuration"
  (with-eval-after-load 'avy
    (global-set-key (kbd "C-.") 'avy-goto-char-timer))
  (avy-setup-default))
(add-to-list 'td/package-list 'avy)
(add-to-list 'td/package-configs #'td/avy-conf)
#+end_src

**** Completions
A combination of packages to enhance completions.

***** Company
Completions at point/region.
#+begin_src elisp :tangle yes
(defun td/company-config ()
  "Company mode configuration."
  (defun td/company-prog-hook ()
    "Completions for programming."
    (setq-local company-backends
                '(company-capf
                  company-dabbrev-code
                  company-keywords
                  company-files
                  company-yasnippet)
                company-dabbrev-other-buffers t))
  (setq company-backends '(company-capf
                           company-ispell
                           company-files)
        company-files-exclusions '(".git/")
        company-idle-delay 0)
  (add-hook 'prog-mode-hook #'td/company-prog-hook)
  (add-hook 'after-init-hook #'global-company-mode))
(add-to-list 'td/package-list 'company)
(add-to-list 'td/package-configs #'td/company-config)
#+end_src

***** Consult
I am currently giving consult a try as my completion-at-point solution, amongst many
other better ways to reference things in Emacs.
#+begin_src elisp :tangle yes
(defun td/consult-config ()
  "Consult configuration"
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Optionally replace `completing-read-multiple' with an enhanced version.
  (advice-add #'completing-read-multiple
              :override #'consult-completing-read-multiple)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  (require 'consult) ; No lazy load for you.

  (td/bind-many-keys '(("C-c h" . consult-history)
                       ("C-c m" . consult-mode-command)
                       ; ("C-c k" . consult-kmacro)
                       ;; C-x bindings (ctl-x-map)
                       ("C-x M-:" . consult-complex-command)
                       ("C-x b" . consult-buffer)
                       ("C-x 4 b" . consult-buffer-other-window)
                       ("C-x 5 b" . consult-buffer-other-frame)
                       ("C-x r b" . consult-bookmark)
                       ;; Custom M-# bindings for fast register access
                       ("M-#" . consult-register-load)
                       ("M-'" . consult-register-store)
                       ("C-M-#" . consult-register)
                       ;; Other custom bindings
                       ("M-y" . consult-yank-pop)
                       ("<help> a" . consult-apropos)
                       ;; M-g bindings (goto-map)
                       ("M-g e" . consult-compile-error)
                       ("M-g f" . consult-flycheck) ; or flymake?
                       ("M-g g" . consult-goto-line)
                       ("M-g M-g" . consult-goto-line)
                       ("M-g o" . consult-outline)
                       ("M-g m" . consult-mark)
                       ("M-g k" . consult-global-mark)
                       ("M-g i" . consult-imenu)
                       ("M-g I" . consult-imenu-multi)
                       ;; M-s bindings (search-map)
                       ("M-s d" . consult-find)
                       ("M-s D" . consult-locate)
                       ("M-s g" . consult-grep)
                       ("M-s G" . consult-git-grep)
                       ("M-s r" . consult-ripgrep)
                       ("M-s l" . consult-line)
                       ("M-s L" . consult-line-multi)
                       ("M-s m" . consult-multi-occur)
                       ("M-s k" . consult-keep-lines)
                       ("M-s u" . consult-focus-lines)
                       ;; Isearch integration
                       ("M-s e" . consult-isearch-history)))
  (define-key isearch-mode-map (kbd "M-e") #'consult-isearch-history)
  (add-hook 'completion-list-mode #'consult-preview-at-point-mode)
  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-recent-file consult--source-project-recent-file
   consult--source-bookmark
   :preview-key (kbd "M-."))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")
  (setq consult-project-root-function
        (lambda ()
          (when-let (project (project-current))
            (car (project-roots project))))))

(add-to-list 'td/package-list 'consult)
(add-to-list 'td/package-list 'consult-flycheck)
(add-to-list 'td/package-configs #'td/consult-config)
#+end_src

***** Marginalia
Better descriptions of symbols in the minibuffer.
#+begin_src elisp :tangle yes
(add-to-list 'td/package-list 'marginalia)
(add-to-list 'td/package-configs
             #'(lambda () "Marginalia config."
                 (marginalia-mode)
                 (define-key minibuffer-local-map (kbd "M-A")
                             #'marginalia-cycle)))
#+end_src

***** Orderless
A completion style that permits entering parts of completion names in any order.
#+begin_src elisp :tangle yes
(defun td/orderless-conf ()
  "Orderless configuration."
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles basic partial-completion)))))
(add-to-list 'td/package-list 'orderless)
(add-to-list 'td/package-configs #'td/orderless-conf)
#+end_src

***** Savehist
Save history for Vertico to look at later.
#+begin_src elisp :tangle yes
;; Built into emacs 29
(savehist-mode)
#+end_src

***** Vertico
Mini-buffer completions back-end.
#+begin_src elisp :tangle yes
(defun td/vertico-conf ()
  "Vertico configuration."
  (vertico-mode)
  (setq enable-recursive-minibuffers t)
  (with-eval-after-load 'consult
    (advice-add #'completing-read-multiple :filter-args
                #'consult-completing-read-multiple)))
(add-to-list 'td/package-list 'vertico)
(add-to-list 'td/package-configs #'td/vertico-conf)
#+end_src

**** Dashboard
#+begin_src elisp :tangle yes
(defun td/dashboard-config ()
  "Dashboard configuration"
  (setq dashboard-startup-banner 'logo
        dashboard-projects-backend 'project-el
        dashboard-items '((projects . 5)
                          (recents . 5)
                          (agenda . 5)
                          (bookmarks . 5))
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-center-content t
        dashboard-set-init-info t)
  (dashboard-setup-startup-hook)
  (when (daemonp)
    (setq initial-buffer-choice
          (lambda ()
            (if (< (length command-line-args) 2)
                (get-buffer dashboard-buffer-name))))))
(add-to-list 'td/package-list 'dashboard)
(add-to-list 'td/package-configs #'td/dashboard-config)
#+end_src

**** Diff-hl
Show me the diffs in the fringe!
#+begin_src elisp :tangle yes
(add-to-list 'td/package-list 'diff-hl)
(add-to-list
 'td/package-configs
 #'(lambda () "Diff-hl configuration"
     (with-eval-after-load 'magit
       (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
       (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
     (global-diff-hl-mode)))
#+end_src

**** Elfeed
RSS Reader :D
#+begin_src elisp :tangle yes
(add-to-list 'td/package-list 'elfeed)
(add-to-list 'td/package-list 'elfeed-org)
(add-to-list
 'td/package-configs
 #'(lambda ()
     "Elfeed config."
     (global-set-key (kbd "M-o e") 'elfeed)
     (with-eval-after-load 'elfeed
       (elfeed-org)
       (setq rmh-elfeed-org-files '("~/Org/elfeed.org")))))
#+end_src

**** Expand Region
It just makes selecting text between sexps easy.
#+begin_src elisp :tangle yes
(add-to-list 'td/package-list 'expand-region)
(add-to-list 'td/package-configs
             #'(lambda () "Expand region config."
                 (global-set-key (kbd "C-=") 'er/expand-region)))
#+end_src

**** Exec Path
It's silly that I need to do this, but I run Emacs in --daemon mode. I'm tired of my $PATH getting missed 1/2 the time.
#+begin_src elisp :tangle yes
(add-to-list 'td/package-list 'exec-path-from-shell)
(add-to-list 'td/package-configs #'exec-path-from-shell-initialize)
#+end_src

**** Hydra
A tool for making repetative chords less cumbersome
#+begin_src elisp :tangle yes
(defun td/hydra-config ()
  "Hydra configuration"

  (defhydra hydra-window (global-map "C-c o")
    "Hydra Windmove"
    ("e" windmove-right "Right")
    ("a" windmove-left "Left")
    ("p" windmove-up "Up")
    ("n" windmove-down "Down")
    ("o" other-window "Other"))

  (defhydra hydra-split (global-map "C-c p")
    "Hydra Split"
    ("v" split-window-right "Vertically")
    ("h" split-window-below "Horizontally")
    ("d" delete-window "Delete")
    ("=" enlarge-window "Enlarge")
    ("-" shrink-window "Shrink")
    ("b" balance-windows "Balance")
    ("D" delete-other-windows "Delete Others"))

  (defhydra org-nav-elements (org-mode-map "C-c n")
    "Navigate Org Elements"
    ("a" org-up-element "Up one level")
    ("e" org-down-element "Down one level")
    ("p" org-backward-element "Move to previous")
    ("n" org-forward-element "Move to next")
    ("TAB" org-cycle "Cycle element")))

(add-to-list 'td/package-list 'hydra)
(add-to-list 'td/package-configs #'td/hydra-config)
#+end_src

**** COMMENT Meow
#+begin_src elisp :tangle yes
(defun td/meow-conf ()
  "Meow configuration."
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))
  (require 'meow)
  (meow-setup)
  (meow-global-mode 1))

(add-to-list 'td/package-list 'meow)
(add-to-list 'td/package-configs #'td/meow-conf)
#+end_src

**** Magit
Magit is one of the biggest reasons why I fell in love with emacs. It's the best keyboard driven "TUI" abstraction of the git command line anywere, period. Better than Fugitive by far. Sorry, Tim Pope.

#+begin_src elisp :tangle yes
(add-to-list 'td/package-list 'magit)
(add-to-list 'td/package-configs
             #'(lambda () "Magit config."
                 (global-set-key (kbd "M-o g") 'magit-status)))
#+end_src

**** Mu4e
Setting up mu4e with contexts feels like a pretty massive process. I decided to leave my
context settings out of this source-controlled repository as to keep some more sensitive
info off of Github. [[https://www.djcbsoftware.nl/code/mu/mu4e/Contexts.html][Contexts]] are well documented if you need a hand with them.

Also, If you need a good starting point with mu4e, I strongly suggest checking out [[https://www.youtube.com/watch?v=yZRyEhi4y44&list=PLEoMzSkcN8oM-kA19xOQc8s0gr0PpFGJQ][System Crafters]].

#+begin_src elisp :tangle yes
(defun td/mu4e-config ()
  "Mu4e config."
  (defun get-signature(file)
    "Retrieve the signature file from the signatures directory.
Mostly used in contexts configuration."
    (let ((dir "/home/trevdev/.local/mail/signatures/"))
      (with-temp-buffer
        (insert-file-contents (format "%s%s" dir file))
        (buffer-string))))

  ;; org-contacts is currently broken :/
  ;; (require 'org-contacts)
  ;; (setq org-contacts-files '("~/Org/contacts.org"))
  ;; org-msg
  (setq org-msg-options "html-postamble:nil num:nil ^:{} toc:nil author:nil
                         email:nil \\n:t"
        org-msg-startup "hidestars indent inlineimages"
        org-msg-greeting-fmt "\nHi%s,\n\n"
        org-msg-greeting-name-limit 3
        org-msg-default-alternatives '((new            . (text html))
                                       (reply-to-html  . (text html))
                                       (reply-to-text  . (text))))
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
  (require 'mu4e)
  (setq mu4e-maildir "~/.local/mail"
        mu4e-change-filenames-when-moving t
        mu4e-update-interval (* 10 60)
        mu4e-get-mail-command "mbsync -a"
        mail-user-agent 'mu4e-user-agent
        mu4e-maildir-shortcuts '((:maildir "/fastmail/INBOX" :key ?p)
                                 (:maildir "/fastmail/Business" :key ?b)
                                 (:maildir "/voltage/INBOX" :key ?v))
        message-send-mail-function 'smtpmail-send-it
        mu4e-attachment-dir "~/Downloads"
        mu4e-context-policy 'pick-first
        mu4e-compose-format-flowed t
        mu4e-compose-signature-auto-include nil
        mml-secure-openpgp-encrypt-to-self t)
  ;; Load mu4e contexts settings. This is the stuff I don't feel like sharing.
  (setq mu4e-contexts (eval (let ((contexts "~/.config/emacs/mu4e-contexts.el"))
                              (when (file-exists-p contexts)
                                (with-temp-buffer
                                  (insert-file-contents contexts)
                                  (read (current-buffer)))))))
  (add-to-list
   'mu4e-bookmarks
   '(:name "Flagged"
           :key ?f
           :query "flag:flagged"))
  (autoload 'org-mime-edit-mail-in-org-mode "org-mime"
    "Set up Autoload so I may edit mail in org mode right away." nil 'macro)
  (add-hook
   'message-mode-hook
   (lambda ()
     "Message Mode Keybinds"
     (local-set-key (kbd "C-c C-o") 'org-mime-edit-mail-in-org-mode)
     (local-set-key (kbd "C-c C-h") 'org-mime-htmlize)))

  (global-set-key (kbd "M-o m") 'mu4e))
; (add-to-list 'td/package-list 'org-contrib)
(add-to-list 'td/package-list 'org-mime)
(add-to-list 'td/package-list 'org-msg)
(add-to-list 'td/package-configs #'td/mu4e-config)
#+end_src

**** Ledger
Knowing what resources you have at your disposal and learning how to budget are powerful things.

#+begin_src elisp :tangle yes
(add-to-list 'td/package-list 'ledger-mode)
(add-to-list 'td/package-configs
             #'(lambda ()
                 (with-eval-after-load 'ledger-mode
                   (setq ledger-use-native-highlighting t))))
#+end_src

**** Sensitive Mode
Inspired from a script written by [[https://anirudhsasikumar.net/blog/2005.01.21.html][Anirudh Sasikumar]]. It has been adapted to accomodate undo-tree. This prevents emacs from generating unencrypted backups & autosave data from =.gpg= files.

#+begin_src elisp :tangle yes
(defun td/config-sensitive-mode ()
  "Initialize sensitive-mode."
  (define-minor-mode sensitive-mode
    "A minor-mode for preventing auto-saves and back-ups for encrypted files."
    nil
    " Sensitive"
    nil
    (if (symbol-value sensitive-mode)
        (progn
          ;; disable backups
          (set (make-local-variable 'backup-inhibited) t)
          ;; disable auto-save
          (if auto-save-default
              (auto-save-mode -1))
          ;; disable undo-tree history(?)
          (when (bound-and-true-p undo-tree-mode)
            (undo-tree-mode -1)))
      (kill-local-variable 'backup-inhibited)
      (if auto-save-default
          (auto-save-mode 1))
      (when (bound-and-true-p global-undo-tree-mode)
        (undo-tree-mode 1)))))

(add-to-list 'td/package-configs #'td/config-sensitive-mode)
#+end_src

**** RG

#+begin_src elisp :tangle yes
(add-to-list 'td/package-list 'rg)
(add-to-list 'td/package-configs #'rg-enable-default-bindings)
#+end_src

**** Undo-Tree
A great tool for turning back the clock on a buffer. Especially when git commits are overlooked.

#+begin_src elisp :tangle yes
(add-to-list 'td/package-list 'undo-tree)
(add-to-list 'td/package-configs
             #'(lambda () "Undo tree config"
                 (with-eval-after-load 'undo-tree
                   (add-to-list
                    'undo-tree-history-directory-alist
                    '(".*" . "~/.emacs.d/undo-tree/")))
                 (global-undo-tree-mode)))
#+end_src

**** Which-key
What the heck was that keybind again? If you can remember how it starts, which-key can help you find the rest.

#+begin_src elisp :tangle yes
(add-to-list 'td/package-list 'which-key)
(add-to-list 'td/package-configs #'which-key-mode)
#+end_src

*** Syntax Support
We're getting into to the language specific stuff now. Much of this is specifically tailored for Shopify, TypeScript and JavaScript development. Many if not all of these features stay out of the way when you're not in the language mode. There's also a very tedious attempt to make all of these disjointed program modes listen to my gosh dang tab-width setting instead of doing their own thing as an insane default.
**** CSS/SCSS

#+begin_src elisp :tangle yes
(add-hook 'css-mode-hook #'(lambda () (setq-local css-indent-offset 2
                                                  tab-width 2)))
#+end_src

**** Emmet
~.Emmet[data-love="true"]~

#+begin_src elisp :tangle yes
(defun td/emmet-conf ()
  "Emmet mode config."
  (setq emmet-expand-jsx-className t)
  (dolist (mode '(sgml-mode-hook
                  css-mode-hook
                  web-mode-hook
                  svelte-mode-hook))
    (add-hook mode #'emmet-mode)))

(add-to-list 'td/package-list 'emmet-mode)
(add-to-list 'td/package-configs #'td/emmet-conf)
#+end_src

**** Flycheck

#+begin_src elisp :tangle yes
(defun td/flycheck-config ()
  "Flycheck Configuration"
  (dolist (mode '(ledger-mode-hook
                  prog-mode-hook))
    (add-hook mode #'flycheck-mode))
  (global-set-key (kbd "C-c f") #'flycheck-mode)
  (define-fringe-bitmap 'flycheck-fringe-bitmap-caret
    (vector #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b10000000
            #b11000000
            #b11100000
            #b11110000
            #b11100000
            #b11000000
            #b10000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000))
  (with-eval-after-load 'flycheck
    (setq flycheck-checker-error-threshold 1000)
    (flycheck-define-error-level
     'error
     :severity 100
     :compilation-level 2
     :overlay-category 'flycheck-error-overlay
     :fringe-bitmap 'flycheck-fringe-bitmap-caret
     :fringe-face 'flycheck-fringe-error
     :error-list-face 'flycheck-error-list-error)
    (flycheck-define-error-level
     'warning
     :severity 100
     :compilation-level 1
     :overlay-category 'flycheck-warning-overlay
     :fringe-bitmap 'flycheck-fringe-bitmap-caret
     :fringe-face 'flycheck-fringe-warning
     :warning-list-face 'flycheck-warning-list-warning)
    (flycheck-define-error-level
     'info
     :severity 100
     :compilation-level 1
     :overlay-category 'flycheck-info-overlay
     :fringe-bitmap 'flycheck-fringe-bitmap-caret
     :fringe-face 'flycheck-fringe-info
     :info-list-face 'flycheck-info-list-info))
  (add-hook 'emacs-lisp-mode-hook #'flycheck-mode))

(add-to-list 'td/package-list 'flycheck)
(add-to-list 'td/package-list 'flycheck-ledger)
(add-to-list 'td/package-configs #'td/flycheck-config)
#+end_src

**** GoLang

#+begin_src elisp :tangle yes
(add-to-list 'td/package-list 'go-mode)
(add-to-list 'td/package-configs
             #'(lambda ()
                 (add-to-list 'auto-mode-alist '("\\.go\\'". go-mode))))
#+end_src

**** LSP Mode
#+begin_src elisp :tangle yes
(defun td/lsp-mode-config ()
  "LSP mode configurations"
  (setq lsp-keymap-prefix "C-c l")
  (dolist (mode '(css-mode-hook
                  scss-mode-hook
                  html-mode-hook
                  js-mode-hook
                  json-mode-hook
                  python-mode-hook
                  php-mode-hook
                  rust-mode-hook
                  scss-mode-hook
                  svelte-mode-hook
                  typescript-mode-hook
                  vue-mode-hook
                  yaml-mode-hook))
    (add-hook mode #'lsp))
  (with-eval-after-load 'lsp-mode
    (setq lsp-log-io nil
          lsp-enable-folding nil
          lsp-clients-typescript-server-args '("--stdio"
                                               "--tsserver-log-file"
                                               "/dev/stderr")
          lsp-auto-guess-root t
          lsp-keep-workspace-alive nil
          lsp-eldoc-enable-hover nil
          lsp-ui-doc-position 'at-point
          lsp-ui-doc-include-signature t)
    (add-to-list
     'lsp-file-watch-ignored-directories "[/\\]env' [/\\]__pycache__'")
    (add-to-list 'lsp-language-id-configuration
                 '(shopify-mode . "shopify"))
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection
                                       "theme-check-language-server")
                      :activation-fn (lsp-activate-on "shopify")
                      :server-id 'theme-check))
    (lsp-enable-which-key-integration)))
(add-to-list 'td/package-list 'lsp-mode)
(add-to-list 'td/package-list 'lsp-ui)
(add-to-list 'td/package-list 'consult-lsp)
(add-to-list 'td/package-configs #'td/lsp-mode-config)
#+end_src

**** Markdown
The free software documentation language of the Internet.

#+begin_src elisp :tangle yes
(defun td/markdown-conf ()
  "Markdown mode config."
  (setq markdown-command "multimarkdown")
  (dolist (mode '(("README\\.md\\'" . gfm-mode)
                  ("\\.md\\'" . markdown-mode)
                  ("\\.markdown\\'" . markdown-mode)))
    (add-to-list 'auto-mode-alist mode)))
(add-to-list 'td/package-list 'markdown-mode)
(add-to-list 'td/package-configs #'td/markdown-conf)
#+end_src

**** Org
Customizations for what is one of the best features that emacs comes with. If we weren't so hung up on Markdown for developer docs, I'd use this mode for everything doc related. Yes, I can export an org file. If I want to track two files, that is. The fancy font-size setup is stolen from [[https://github.com/daviwil/emacs-from-scratch][Emacs from Scratch]] by [[https://www.youtube.com/c/SystemCrafters][System Crafters]]. Check them out :)

#+begin_src elisp :tangle yes
(defvar td/tag-list
  '((:startgroup)
    ;; Put mutually exclusive tags here
    (:endgroup)
    ("@home" . ?H)
    ("@work" . ?W)
    ("urgent" . ?U)
    ("learning" . ?l)
    ("foss" . ?f)
    ("gurps" . ?g)
    ("blog" . ?b)
    ("idea" . ?i))
  "The tags for org headlines.")

(defvar td/todo-keywords
  `((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
    (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)"
              "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)"))
  "A sequence of keywords for Org headlines.")

(defvar td/org-agenda-commands
  '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "NEXT"
            ((org-agenda-overriding-header "Next Tasks")))
      (tags-todo "agenda/ACTIVE"
                 ((org-agenda-overriding-header "Active Projects")))))
    ("n" "Next Tasks"
     ((todo "NEXT"
            ((org-agenda-overriding-header "Next Tasks")))))
    ("g" "GURPS" tags-todo "+gurps")
    ("U" "Urgent Tasks" tags-todo "+urgent")
    ;; Low-effort next actions
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
     ((org-agenda-overriding-header "Low Effort Tasks")
      (org-agenda-max-todos 20)
      (org-agenda-files org-agenda-files)))
    ("w" "Workflow Status"
     ((todo "WAIT"
            ((org-agenda-overriding-header "Waiting on External")
             (org-agenda-files org-agenda-files)))
      (todo "REVIEW"
            ((org-agenda-overriding-header "In Review")
             (org-agenda-files org-agenda-files)))
      (todo "PLAN"
            ((org-agenda-overriding-header "In Planning")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "BACKLOG"
            ((org-agenda-overriding-header "Project Backlog")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "READY"
            ((org-agenda-overriding-header "Ready for Work")
             (org-agenda-files org-agenda-files)))
      (todo "ACTIVE"
            ((org-agenda-overriding-header "Active Projects")
             (org-agenda-files org-agenda-files)))
      (todo "COMPLETED"
            ((org-agenda-overriding-header "Completed Projects")
             (org-agenda-files org-agenda-files)))
      (todo "CANC"
            ((org-agenda-overriding-header "Cancelled Projects")
             (org-agenda-files
              org-agenda-files))))))
  "Custom commands for Org Agenda.")

(defun td/tweak-org-levels ()
  "Enlarge org levels for more readability."
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.0)
                  (org-level-6 . 1.0)
                  (org-level-7 . 1.0)
                  (org-level-8 . 1.0)))
    (set-face-attribute (car face) nil :weight 'semi-bold :height (cdr face))))

(require 'ox-md nil t)
(global-set-key (kbd "C-c a") 'org-agenda)
(define-key org-mode-map (kbd "C-c t") 'org-table-export)

(setq org-fontify-quote-and-verse-blocks t
      org-directory "~/Org"
      org-archive-location "archives/%s_archive::"
      org-log-done 'time
      org-log-into-drawer t
      org-enforce-todo-dependencies t
      org-enforce-todo-checkbox-dependencies t
      org-src-preserve-indentation t
      org-clock-persist 'history
      org-agenda-block-separator "──────────"
      org-duration-format '(("h" . nil) (special . 2))
      org-clock-total-time-cell-format "%s"
      org-agenda-files '("~/Org")
      org-tag-alist td/tag-list
      org-todo-keywords td/todo-keywords
      org-clock-sound "~/.config/emacs/inspectorj_bell.wav"
      org-timer-default-timer "25"
      org-agenda-custom-commands td/org-agenda-commands)

(setq org-capture-templates
      '(("c" "Cookbook" entry (file "~/org/cookbook.org")
         "%(org-chef-get-recipe-from-url)"
         :empty-lines 1)
        ("m" "Manual Cookbook" entry (file "~/org/cookbook.org")
         "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :servings:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n  :END:\n** Ingredients\n   %?\n** Directions\n\n")))

(defun td/org-packages-conf ()
  "The configurations for the many org addon packages I am using."
  ;; Visual fill
  (defun org-visual-fill-setup ()
    "Center the column 100 characters wide"
    (setq-local visual-fill-column-width 100
                visual-fill-column-center-text nil)
    (visual-fill-column-mode 1))

  (define-key org-mode-map (kbd "C-c v") 'visual-fill-column-mode)

  ;; Org make toc
  (defvar td/org-auto-toc-files
    '("~/.config/emacs/config.org")
    "Files that should auto-toc on save.")

  (defun td/set-auto-toc ()
    "Set auto-toc if buffer in auto-toc-files."
    (if (member
         (buffer-file-name)
         (mapcar 'expand-file-name td/org-auto-toc-files))
        (progn
          (org-make-toc-mode)
          (message "Org make TOC mode is on!"))))

  ;; org-alert
  (with-eval-after-load 'org-alert
    (setq alert-default-style 'libnotify
          org-alert-interval 7200
          org-alert-notify-cutoff 60
          org-alert-notification-title "Org Agenda")
    (org-alert-enable))

  ;; One hook to start it all.
  (defun td/org-hook ()
    "Do this on org mode startup."
    (org-indent-mode)
    (yas-minor-mode)
    (org-clock-persistence-insinuate)
    (org-visual-fill-setup)
    (td/set-auto-toc))

  (add-hook 'org-mode-hook 'td/org-hook))

(dolist (pkg '(org-chef
               ox-gfm
               visual-fill-column
               org-alert
               org-make-toc))
  (add-to-list 'td/package-list pkg))
(add-to-list 'td/package-configs #'td/org-packages-conf)
#+end_src
***** TODO Clean Up Package Config
The package config function for org-mode is messy and consolidated. Separate the bits.
***** Custom Clock Table
I decided to write a [[file:td-custom-clocktable.el?ts=2][custom clocktable formatter]]. I wanted a neat and tidy way to lay out the hours that I've worked, vs how much effort they should have taken & what that time should be worth when I invoice. I feel like this table is more useful for reporting to certain subcontracts.

#+begin_src elisp :tangle yes
(load-file "~/.config/emacs/td-custom-clocktable.el")
#+end_src

Here's an example:
#+BEGIN: clocktable :scope ("clocktable-example.org") :maxlevel 3 :properties ("Comment" "Effort") :formatter td/custom-clocktable
#+CAPTION: Clock summary at [2022-03-03 Thu 13:08]
| Task              | Est   | Time   | Billable | Comment                |
|-------------------+-------+--------+----------+------------------------|
| Client            |       | 8.00h  | $520.00  |                        |
| — Task B          |       | 2.00h  | $130.00  | This is taking a while |
| — Task A          |       | 6.00h  | $390.00  |                        |
|-------------------+-------+--------+----------+------------------------|
| Client B          |       | 12.43h | $807.95  |                        |
| — Special Project |       | 12.00h | $780.00  |                        |
| —— Task C         | 9.00h | 8.00h  | $520.00  |                        |
| —— Task D         |       | 4.00h  | $260.00  |                        |
| — Unrelated Task  |       | 0.43h  | $27.95   |                        |
|-------------------+-------+--------+----------+------------------------|
| Totals            |       | 20.43h | $1327.95 |                        |
#+END

**** PHP

#+begin_src elisp :tangle yes
(define-derived-mode php-mode web-mode "PHP"
  "I just want web-mode highlighting with .svelte files")

(defun td/get-intelephense-key ()
  "Get my intelephense license key."
  (with-temp-buffer
    (insert-file-contents "~/Documents/intelephense.txt")
    (buffer-string)))

(defun td/get-wordpress-stubs ()
  "The stubs required for a WordPress Project"
  (json-insert ["apache" "bcmath" "bz2" "calendar" "com_dotnet" "Core"
   "ctype" "curl" "date" "dba" "dom" "enchant" "exif"
   "fileinfo" "filter" "fpm" "ftp" "gd" "hash" "iconv" "imap"
   "interbase" "intl" "json" "ldap" "libxml" "mbstring"
   "mcrypt" "meta" "mssql" "mysqli" "oci8" "odbc" "openssl"
   "pcntl" "pcre" "PDO" "pdo_ibm" "pdo_mysql" "pdo_pgsql"
   "pdo_sqlite" "pgsql" "Phar" "posix" "pspell" "readline"
   "recode" "Reflection" "regex" "session" "shmop" "SimpleXML"
   "snmp" "soap" "sockets" "sodium" "SPL" "sqlite3" "standard"
   "superglobals" "sybase" "sysvmsg" "sysvsem" "sysvshm" "tidy"
   "tokenizer" "wddx" "xml" "xmlreader" "xmlrpc" "xmlwriter"
   "Zend OPcache" "zip" "zlib" "wordpress"]))

(provide 'php-mode)
(add-to-list 'auto-mode-alist '("\\.php\\'" . php-mode))
(add-to-list 'auto-mode-alist '("\\.twig\\'" . php-mode))
#+end_src

**** Prettier
An opinionated way to clean up my web-dev code quickly.

#+begin_src elisp :tangle yes
(add-to-list 'td/package-list 'prettier-js)
#+end_src

**** Prog Mode
A few settings that are useful in programming buffers

#+begin_src elisp :tangle yes
(defun td/toggle-indent-tabs-mode ()
  "Toggle `indent-tabs-mode'."
  (interactive)
  (setq-local indent-tabs-mode (not indent-tabs-mode)))

(defun td/infer-indentation-style ()
  ;; if our source file uses tabs, we use tabs, if spaces spaces, and if
  ;; neither, we use the current indent-tabs-mode
  (let ((space-count (how-many "^  "))
        (tab-count (how-many "^\t")))
    (if (> space-count tab-count)
        (setq indent-tabs-mode nil))
    (if (> tab-count space-count)
        (setq indent-tabs-mode t))))

(defun td/prog-mode-settings ()
  (setq whitespace-style '(face tabs tab-mark trailing))
  (setq whitespace-display-mappings '((tab-mark 9 [9474 9] [92 9])))
  (custom-set-faces
   '(whitespace-tab ((t (:foreground "#636363")))))
  (setq-local fill-column 80)
  (setq-local show-trailing-whitespace t)
  (show-paren-mode t)
  (hs-minor-mode)
  (display-line-numbers-mode)
  (display-fill-column-indicator-mode)
  (electric-pair-local-mode)
  (yas-minor-mode)
  (td/infer-indentation-style)
  (whitespace-mode))

;; I want a way to tab over relative similar tab-to-tab-stop
(setq indent-tabs-mode nil)
(setq standard-indent 2)
(setq backward-delete-char-untabify-method 'hungry)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq-default evil-shift-width 2)
(setq-default electric-indent-inhibit t)

(dolist (combo '(("C-c i" . td/toggle-indent-tabs-mode)
                 ("C-i" . indent-relative)))
  (define-key prog-mode-map (kbd (car combo)) (cdr combo)))

(add-hook 'prog-mode-hook 'td/prog-mode-settings)
#+end_src

**** Python
<3 Python

#+begin_src elisp :tangle yes
(add-to-list 'td/package-list 'pyvenv)
#+end_src

**** Rainbow Delimiters
This comes in handier than you think it would. Especially with these (lisp '((config . files)))

#+begin_src elisp :tangle yes
(add-to-list 'td/package-list 'rainbow-delimiters)
(add-to-list 'td/package-configs
             #'(lambda ()
                 (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))
#+end_src

**** Rainbow Mode
LSP-Mode covers making visual representations of hex color codes almost everywhere I need it. For everywhere else there's rainbow-mode

#+begin_src elisp :tangle yes
(add-to-list 'td/package-list 'rainbow-mode)
#+end_src

**** Rust
#+begin_src elisp :tangle yes
(defun td/rust-conf ()
  "Rust mode config"
  (defun td/rust-run-args (s)
    (interactive "sOptional Args:")
    (rust--compile (concat "%s run " s) rust-cargo-bin))

  (with-eval-after-load 'rust-mode
    (td/bind-many-keys '(("C-c c r" . rust-run)
                         ("C-c c a r" . td/rust-run-args))
                       'rust-mode-map)))
(add-to-list 'td/package-list 'rust-mode)
(add-to-list 'td/package-configs #'td/rust-conf)
#+end_src

**** Shopify Mode
This is where I turn emacs into a usuable IDE for Shopify themes. I use regexp to tell emacs to use s/css-mode for css liquid, then register an LSP client for the [[https://shopify.dev/themes/tools/theme-check#using-theme-check-in-other-editors][theme-check-language-server]].

#+begin_src elisp :tangle yes
;; Derive liquid-mode from web-mode
(define-derived-mode shopify-mode web-mode "Shopify"
  "Use web mode to highlight shopify liquid files")
(provide 'shopify-mode)

(add-to-list 'auto-mode-alist '("\\.liquid\\'" . shopify-mode))

(defvar liquid-electric-pairs '((?% . ?%)) "Electric pairs for liquid syntax.")
(defun liquid-add-electric-pairs ()
  (setq-local electric-pair-pairs (append electric-pair-pairs
                                          liquid-electric-pairs)
              electric-pair-text-pairs electric-pair-pairs))
(add-hook 'shopify-mode-hook #'liquid-add-electric-pairs)
#+end_src

**** Svelte
Fake-out a "svelte-mode" for the purposes of activating with the svelte-language-server. I'm extending web-mode because it highlights =.svelte= files well.

#+begin_src elisp :tangle yes
(define-derived-mode svelte-mode web-mode "Svelte"
  "I just want web-mode highlighting with .svelte files")
(provide 'svelte-mode)
(add-to-list 'auto-mode-alist '("\\.svelte\\'" . svelte-mode))
#+end_src

**** Treesitter
Tree-sitter is an impressive project. It delivers exceptionally rich syntax highlighting for things like emacs/vim. A little tricky to theme, though, as it has a billion font lock faces and every tree-sitter syntax config may or may not use them the same way. I try to avoid looking a gift horse in the mouth.

#+begin_src elisp :tangle yes
(defun td/tree-sitter-conf ()
  "Tree sitter config."
  (require 'tree-sitter)
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
(add-to-list 'td/package-list 'tree-sitter)
(add-to-list 'td/package-list 'tree-sitter-langs)
(add-to-list 'td/package-configs #'td/tree-sitter-conf)
#+end_src

**** TypeScript & JavaScript
#+begin_src elisp :tangle yes
(dolist (pkg '(typescript-mode
               js2-mode
               prettier-js))
  (add-to-list 'td/package-list pkg))
(add-to-list 'td/package-configs
             #'(lambda ()
                 "TypeScript/JavaScript configs."
                 (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
                 (setq js-indent-level 2
                       typescript-indent-level 2
                       js2-strict-inconsistent-return-warning nil)))
#+end_src

**** VueJS
#+begin_src elisp :tangle yes
(define-derived-mode vue-mode web-mode "VueJS"
  "I just want web-mode highlighting with .svelte files")
(provide 'vue-mode)
(add-to-list 'auto-mode-alist '("\\.vue\\'" . vue-mode))
#+end_src

**** Web Mode
There isn't a much better catch-all for web template syntax support than web-mode. It works well with Liquid syntax files. It also comes with it's own divergent, insane defaults that I have to choke out.

#+begin_src elisp :tangle yes
(defun td/web-mode-conf ()
  "Web mode config."
  (setq web-mode-markup-indent-offset tab-width
        web-mode-code-markup-indent-offset tab-width
        web-mode-style-padding tab-width
        web-mode-script-padding tab-width
        web-mode-block-padding tab-width
        web-mode-enable-auto-indentation nil
        web-mode-enable-auto-pairing nil)
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode)))
(add-to-list 'td/package-list 'web-mode)
(add-to-list 'td/package-configs #'td/web-mode-conf)
#+end_src

**** YAML
YAML's a really nice way to configure software, containers and projects. I use it when I can.

#+begin_src elisp :tangle yes
(add-to-list 'td/package-list 'yaml-mode)
(add-to-list 'td/package-configs
             #'(lambda ()
                 "YAML mode config."
                 (require 'yaml-mode)
                 (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))))
#+end_src

**** Yasnippet
Snippets! They're helpful.

#+begin_src elisp :tangle yes
(add-to-list 'td/package-list 'yasnippet)
(add-to-list 'td/package-list 'yasnippet-snippets)
(add-to-list 'td/package-configs
             #'(lambda ()
                 (require 'yasnippet)
                 (global-set-key (kbd "C-c ,") #'yas-expand)
                 (setq yas-snippet-dirs '("~/.config/emacs/yasnippets"))
                 (yas-reload-all)))
#+end_src

*** Install, Prune & Configure
Here we implement =td/package-list= and =td/package-configs= to install missing packages, then forcibly set =package-selected-packages=.

The goal here is to keep our package installations sanitizable. At any given point I can just =package-autoremove= packages that are not a part of my init while retaining the ones that are.

#+begin_src elisp :tangle yes
(defun td/package-not-installed (package)
  "Test if a `PACKAGE' is not installed"
  (not (package-installed-p package)))
(defun td/set-selected-packages ()
  "Set `package-selected-packages' to `td/package-list'.
Packages previously installed via `install-package' will become auto-removable."
  (customize-save-variable 'package-selected-packages td/package-list))
(when (seq-some #'td/package-not-installed td/package-list)
      (package-refresh-contents)
      (setq package-selected-packages td/package-list)
      (package-install-selected-packages t))
(seq-do #'funcall td/package-configs)
(add-hook 'after-init-hook #'td/set-selected-packages)
#+end_src

** About This Config
This literate configuration is a labour of love from a man who changes his mind and mixes things up /often/.

I'm not sure it will ever be finished or perfect. At times, things may clunk. I will do my best to clunk them in another branch.

If you like this config the way you found it, make sure that you fork it or make note of which commit you preferred.

If you like it enough to drop me a tip, feel free to do so:

[[https://ko-fi.com/Y8Y34UWHH][https://ko-fi.com/img/githubbutton_sm.svg]]
[[https://liberapay.com/trev.dev/donate][https://liberapay.com/assets/widgets/donate.svg]]
BTC: bc1qwad2jlteldw644w4wfh28y6ju53zfp69nnswrq

*** Installation
If you've decided to fork this repository and wish to use it as-is, here are the steps you'll need to take.

*Note*: Config us currently set up for Emacs 29. Be sure to disable the weird bits, like [[* Performance Tweaks][compilation deferral]].

1. Clone this repository to =~/.config/emacs=.
2. Optionally checkout an alternate edition. Your branch choices are:
   - *main* - A combination of what works best for me currently.
   - *evil* - It's like branch main, but it's /evil/.
   - *saintly* - A pure approach to emacs using only supported internals wherever possible. This is my best attempt at "minimalism" with Emacs.
3. Symlink =init.el= to your home directory: =ln -s ~/.emacs.el ~/.config/emacs/init.el=
4. Make sure you clear out any existing configs in =~/.emacs.d= and =rm -rf ~/.emacs.d/elpa= to clear your existing packages.
5. Run emacs for the first time.

*** Current Mindset
At the moment I'm striving for a mix of powerful flexibility & style whilst keeping as much of the package bloat down as I can. I feel like this is going well, and it's getting better over time.

Branch main is my preferred, hopefully not broken configuration. It's a mix of what feels like the best tools/packages for what I want to do.

The *saintly* branch is an experimental config geared toward staunch support for using supported internals only. It uses packages like Eglot, Corfu, Cape, etc.

The /evil/ branch is very similar to the main branch, but it uses vim bindings. Every now and again I get the itch to keep it Vimmy. It never seems to last in Emacs, so the branch is kept separate for myself or anyone else who cares to use it.

*** Licenses
- For the [[file:inspectorj_bell.wav][bell sound]]: "Bell, Candle Damper, A (H4n).wav" by InspectorJ (www.jshaw.co.uk) of Freesound.org (Creative Commons - CC BY 3.0)
