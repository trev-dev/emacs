* Emacs Configuration
:PROPERTIES:
#+STARTUP: overview
#+TAGS: disabled(d) fav(f)
:END:
Herein lies my Emacs configuration. Use it well
** Contents
:PROPERTIES:
:TOC:      :include siblings :depth 3 :force (nothing) :ignore (nothing) :local (nothing)
:END:
:CONTENTS:
- [[#performance-tweaks][Performance Tweaks]]
- [[#autosaves--backups][Autosaves & Backups]]
- [[#package-management][Package Management]]
- [[#look--feel][Look & Feel]]
  - [[#all-the-icons][All The Icons]]
  - [[#dired][Dired]]
  - [[#doom-themes][DOOM Themes]]
  - [[#emacs][Emacs]]
  - [[#font-setup][Font Setup]]
  - [[#telephone-line][Telephone Line]]
- [[#utility-packages][Utility Packages]]
  - [[#avy][Avy]]
  - [[#ace-window][Ace Window]]
  - [[#ctrlf][CTRLF]]
  - [[#dashboard][Dashboard]]
  - [[#diff-hl][Diff-hl]]
  - [[#elfeed][Elfeed]]
  - [[#expand-region][Expand Region]]
  - [[#exec-path][Exec Path]]
  - [[#goggles][Goggles]]
  - [[#hydra][Hydra]]
  - [[#evil][Evil!]]
  - [[#magit][Magit]]
  - [[#minibuffer-completions][Minibuffer Completions]]
  - [[#mu4e][Mu4e]]
  - [[#ledger][Ledger]]
  - [[#projectile][Projectile]]
  - [[#rg][RG]]
  - [[#treemacs][Treemacs]]
  - [[#undo-tree][Undo-Tree]]
  - [[#which-key][Which-key]]
- [[#syntax-support][Syntax Support]]
  - [[#company-completions][Company Completions]]
  - [[#cssscss][CSS/SCSS]]
  - [[#emmet][Emmet]]
  - [[#eglot][Eglot]]
  - [[#flycheck][Flycheck]]
  - [[#flymake][Flymake]]
  - [[#golang][GoLang]]
  - [[#markdown][Markdown]]
  - [[#lsp-mode][LSP Mode]]
  - [[#org][Org]]
    - [[#custom-clock-table][Custom Clock Table]]
  - [[#php][PHP]]
  - [[#prettier][Prettier]]
  - [[#prog-mode][Prog Mode]]
  - [[#python][Python]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#rainbow-mode][Rainbow Mode]]
  - [[#rust][Rust]]
  - [[#shopify-mode][Shopify Mode]]
  - [[#svelte][Svelte]]
  - [[#treesitter][Treesitter]]
  - [[#typescript--javascript][TypeScript & JavaScript]]
  - [[#vuejs][VueJS]]
  - [[#web-mode][Web Mode]]
  - [[#yaml][YAML]]
  - [[#yasnippet][Yasnippet]]
- [[#about-this-config][About This Config]]
  - [[#installation][Installation]]
  - [[#current-mindset][Current Mindset]]
  - [[#licenses][Licenses]]
:END:

** Performance Tweaks
Give the garbage collector free-reign at start-up, then take it back to 8M. Use so-long-mode for editor-breaking minified css/js.

#+begin_src elisp
;; Minimize garbage collection during startup
(setq gc-cons-threshold most-positive-fixnum)

;; Lower threshold back to 8 MiB (default is 800kB)
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold (expt 2 23))))

(setq read-process-output-max (* 1024 1024))

;; Don't die when handling large, minified files
(global-so-long-mode 1)

;; For native compilation with Emacs 28+
(setq comp-deferred-compilation t)
#+end_src

** Autosaves & Backups
I hate seeing project folders get all cluttered up

#+begin_src elisp
;; Put autosave files (ie #foo#) and backup files (ie foo~) in ~/.emacs.d/.
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/autosaves/" t))
      backup-directory-alist '((".*" . "~/.emacs.d/backups/")))

;; create the autosave dir if necessary, since emacs won't.
(make-directory "~/.emacs.d/autosaves/" t)

(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src

** Package Management
We need packages, so we're going to setup some repos and pre-install use-package for packages later on in this config. We're also using ~straight.el~ for github repositories.

#+begin_src elisp
(require 'package)

(dolist (repo '(("elpa" . "https://elpa.gnu.org/packages/")
                ("melpa" . "https://melpa.org/packages/")
                ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (add-to-list 'package-archives repo))

(setq package-enable-at-startup nil)
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

; straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

** Look & Feel
*** All The Icons                                                     :fav:
These are used all over the place
#+begin_src elisp
(straight-use-package 'all-the-icons)
#+end_src
#+end_src

*** Dired
#+begin_src elisp
(straight-use-package '(all-the-icons-dired
                        :type git :host github :repo "wyuenho/all-the-icons-dired"))
(set 'all-the-icons-dired-monochrome nil)
(add-hook 'dired-mode-hook '(lambda()
                             (dired-hide-details-mode)
                             (all-the-icons-dired-mode)))
#+end_src

*** DOOM Themes                                                       :fav:
Doom's themes are hard to beat. They're easy to install, highly customizable and hackable. Writing my own theme is easy.

#+begin_src elisp
;; I will write/store my custom doom (and non-doom?) themes here
(straight-use-package 'doom-themes)
(add-to-list 'custom-theme-load-path "~/.config/emacs/themes")
(with-eval-after-load 'all-the-icons
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t
        doom-themes-padded-modeline 1)
  (load-theme 'doom-material-dark-devel t)
  (doom-themes-org-config))
#+end_src

*** Emacs
Clear out most of the GUI clutter, display relative line numbers, highlight the line I'm on, smaller left-only fringe, quick yes/no answers, some prog-mode QOL settings as well

#+begin_src elisp
;; Interface
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(blink-cursor-mode 1)
(setq display-line-numbers-type 'relative)
(global-visual-line-mode 1)
(recentf-mode 1)
(setq history-length 25)
(save-place-mode 1)
(global-auto-revert-mode 1)
(fringe-mode '(4 . 0))
(setq inhibit-startup-screen t)
(setq initial-scratch-message "")
(defalias 'yes-or-no-p 'y-or-n-p)

;; Spelling
(setq ispell-personal-dictionary "~/.config/emacs/personal-dict.pwd")
(setq ispell-program-name "aspell")
(setq ispell-dictionary "english")

;; Browser
(setq browse-url-generic-program "/usr/bin/firefox")
#+end_src

*** Font Setup
I recently discovered [[https://www.jetbrains.com/lp/mono/][JetBrains Mono]] and I'm really enjoying it.

#+begin_src elisp
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
(add-to-list 'default-frame-alist '(font . "Jetbrains Mono 10"))
#+end_src

Ligatures, in a separate block so that they are easy to disable. These don't always work well across versions and updates.
#+begin_src elisp
(defvar ligatures '("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->" "/**" "/*" "///"
                    "/=" "/==" "/>" "//" "*>" "***" "*/" "<-" "<<-" "<=>" "<=" "<|"
                    "<||" "<|||::=" "<|>" "<:" "<>" "<-<" "<<<" "<==" "<<=" "<=<" "<==>"
                    "<-|" "<<" "<~>" "<=|" "<~~" "<~" "<$>" "<$" "<+>" "<+" "</>" "</"
                    "<*" "<*>" "<->" "<!--" ":>" ":<" ":::" "::" ":?" ":?>" ":=" "=>>"
                    "==>" "=/=" "=!=" "=>" "===" "=:=" "==" "!==" "!!" "!=" ">]" ">:"
                    ">>-" ">>=" ">=>" ">>>" ">-" ">=" "&&&" "&&" "|||>" "||>" "|>" "|]"
                    "|}" "|=>" "|->" "|=" "||-" "|-" "||=" "||" ".." ".?" ".=" ".-" "..<"
                    "..." "+++" "+>" "++" "[||]" "[<" "[|" "{|" "??" "?." "?=" "?:" "####"
                    "###" "#[" "#{" "#=" "#!" "#:" "#_(" "#_" "#?" "#(" "##" ";;" "_|_"
                    "__" "\\\\" "\\/" "~~" "~~>" "~>" "~=" "~-" "~@" "$>" "^=" "]#")
  "Ligatures for ligature.el.")

(straight-use-package '(ligature :type git :host github
                                 :repo "mickeynp/ligature.el"))
(ligature-set-ligatures 'prog-mode ligatures)
(add-hook 'prog-mode-hook 'ligature-mode)
#+end_src

*** Telephone Line
A simple, but nicer looking modeline
#+begin_src elisp
(straight-use-package 'telephone-line)

(setq telephone-line-primary-left-separator 'telephone-line-cubed-left
      telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
      telephone-line-primary-right-separator 'telephone-line-cubed-right
      telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)

(defface my-emacs
  '((t (:background "#7455ac" :foreground "white" :weight bold)))
  "A face for EMACS that isn't evil.")

(setq telephone-line-faces
      '((emacs . (my-emacs . telephone-line-accent-inactive))
        (accent . (telephone-line-accent-active . telephone-line-accent-inactive))
        (nil . (mode-line . mode-line-inactive))))

(telephone-line-defsegment just-emacs () "EMACS")

(defcustom td/project-custom-name nil
  "A custom directory-local name for a project.el project."
  :type 'string)

;; Props to 404cn for coming up with the idea for this segment for project.el
;; https://github.com/dbordak/telephone-line/issues/124#issuecomment-1013603600
(defun td/project-name ()
  (format "%s:"
          (if (stringp td/project-custom-name)
              td/project-custom-name
            (file-name-nondirectory
             (directory-file-name (project-root (project-current)))))))

(telephone-line-defsegment my--project-segment ()
  (propertize (td/project-name)
              'face 'telephone-line-projectile
              'display '(raise 0.0)))

(telephone-line-defsegment* telephone-line-project-segment ()
  "A segment for project.el."
  (if (and (buffer-file-name)
           (project-current))
      (list ""
            (funcall (my--project-segment) 'telephone-line-unimportant)
            (propertize (file-relative-name (buffer-file-name))))
    (telephone-line-raw mode-line-buffer-identification t)))

(setq telephone-line-lhs
      '((emacs   . (just-emacs))
        (accent  . (telephone-line-vc-segment
                    telephone-line-erc-modified-channels-segment
                    telephone-line-process-segment))
        (nil     . (telephone-line-project-segment
                    telephone-line-buffer-segment))))

(setq telephone-line-rhs
      '((nil     . (telephone-line-flycheck-segment
                   telephone-line-misc-info-segment))
       (accent  . (telephone-line-major-mode-segment))
       (emacs   . (telephone-line-airline-position-segment))))

(telephone-line-mode 1)
#+end_src

** Utility Packages
Packages that extend and augment emacs in a general way
*** Avy
#+begin_src elisp
(straight-use-package 'avy)

(global-set-key (kbd "C-;") 'avy-goto-char)
(with-eval-after-load 'avy
  (avy-setup-default))
#+end_src

*** Ace Window
Make the "other window" way better. This is a dependency from [[* Treemacs][Treemacs]].
#+begin_src elisp
(straight-use-package 'ace-window)
(global-set-key (kbd "M-o") 'ace-window)
#+end_src

*** CTRLF
Improved buffer searching
#+begin_src elisp
(straight-use-package 'ctrlf)
(ctrlf-mode +1)
#+end_src

*** Dashboard
#+begin_src elisp
(straight-use-package 'dashboard)
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))
      dashboard-startup-banner 'logo
      dashboard-projects-backend 'project-el
      dashboard-items '((projects . 5)
                        (recents . 5)
                        (agenda . 5)
                        (bookmarks . 5))
      dashboard-set-heading-icons t
      dashboard-set-file-icons t
      dashboard-center-content t
      dashboard-set-init-info t)
(dashboard-setup-startup-hook)
#+end_src

*** Diff-hl                                                           :fav:
Show me the diffs in the fringe!

#+begin_src elisp
(straight-use-package 'diff-hl)

(with-eval-after-load 'magit
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))

(global-diff-hl-mode)
#+end_src

*** Elfeed
RSS Reader :D
#+begin_src elisp
(straight-use-package 'elfeed)
(global-set-key (kbd "C-c e") 'elfeed)
(straight-use-package 'elfeed-org)
(with-eval-after-load 'elfeed
  (elfeed-org)
  (setq rmh-elfeed-org-files '("~/Org/elfeed.org")))
#+end_src

*** Expand Region
#+begin_src elisp
(straight-use-package 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+end_src

*** Exec Path
It's silly that I need to do this, but I run Emacs in --daemon mode. I'm tired of my $PATH getting missed 1/2 the time.
#+begin_src elisp
(straight-use-package 'exec-path-from-shell)
(when (daemonp)
  (exec-path-from-shell-initialize))
#+end_src

*** Goggles
Goggles is light volatile highlights, but cooler. If you're familiar with evil-goggles, this is the "holy" equivalent.
#+begin_src elisp
(straight-use-package 'goggles)
(add-hook 'prog-mode-hook 'goggles-mode)
(add-hook 'text-mode-hook 'goggles-mode)
#+end_src

*** Hydra
A tool for making repetative chords less cumbersome
#+begin_src elisp
(straight-use-package 'hydra)

(defhydra hydra-window (global-map "C-c o")
  "Hydra Windmove"
  ("e" windmove-right "Right")
  ("a" windmove-left "Left")
  ("p" windmove-up "Up")
  ("n" windmove-down "Down"))

(defhydra hydra-split (global-map "C-c p")
  "Hydra Split"
  ("v" split-window-right "Vertically")
  ("h" split-window-below "Horizontally")
  ("d" delete-window "Delete")
  ("=" enlarge-window "Enlarge")
  ("-" shrink-window "Shrink")
  ("b" balance-windows "Balance")
  ("k" delete-window "Delete"))
#+end_src

*** Evil!                                                        :disabled:
Currently not tangled as I enjoy learning Emacs the righteous way.
#+begin_src elisp :tangle no
(straight-use-package 'evil)

(setq evil-undo-system 'undo-tree
      evil-search-module 'evil-search
      evil-visual-state-cursor 'hbar
      evil-want-keybinding nil
      evil-disable-insert-state-bindings t)
(evil-mode 1)

(with-eval-after-load 'evil
  (straight-use-package 'evil-collection)
  (evil-collection-init)

  (with-eval-after-load 'ledger-mode
    (straight-use-package 'evil-ledger)
    (add-hook 'ledger-mode-hook #'evil-ledger-mode))

  (straight-use-package 'evil-surround)
  (global-evil-surround-mode 1)

  (straight-use-package 'evil-org)
  (add-hook 'org-mode-hook #'evil-org-mode)
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)

  (straight-use-package 'evil-commentary)
  (evil-commentary-mode)

  (straight-use-package 'evil-snipe)
  (evil-snipe-mode 1)
  (evil-snipe-override-mode 1)
  (setq evil-snipe-scope 'whole-visible
        evil-snipe-spillover-scope 'whole-buffer)

  (straight-use-package 'evil-matchit)
  (global-evil-matchit-mode 1))
#+end_src

*** Magit                                                             :fav:
Magit is one of the biggest reasons why I fell in love with emacs. It's the best keyboard driven "TUI" abstraction of the git command line anywere, period. Better than Fugitive by far. Sorry, Tim Pope.

#+begin_src elisp
(straight-use-package 'magit)
(global-set-key (kbd "C-c g") 'magit-status)
#+end_src

*** Minibuffer Completions
A combination of packages to customize the minibuffer, as you rarely want to use just one.
#+begin_src elisp
;; Selectrum completions with prescient
(straight-use-package 'selectrum)
(straight-use-package 'selectrum-prescient)
(selectrum-mode +1)
(selectrum-prescient-mode +1)
(prescient-persist-mode +1)

;; Enable richer annotations using the Marginalia package
(use-package marginalia
  :ensure t
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :init
  (marginalia-mode))

;; Example configuration for Consult
(straight-use-package 'consult-flycheck)
(use-package consult
  :ensure t
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ; orig. bookmark-jump
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ; orig. yank-pop
         ("<help> a" . consult-apropos)            ; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flycheck)               ; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ; orig. goto-line
         ("M-g o" . consult-outline)               ; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi))           ; needed by consult-line to detect isearch

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI. You may want to also
  ;; enable `consult-preview-at-point-mode` in Embark Collect buffers.
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Optionally replace `completing-read-multiple' with an enhanced version.
  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :config
  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
   :preview-key (kbd "M-."))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")
  (setq consult-project-root-function
        (lambda ()
          (when-let (project (project-current))
            (car (project-roots project))))))
#+end_src

*** Mu4e
Setting up mu4e with contexts feels like a pretty massive process. I've decided to load that config from an external file to keep this file sane. Also, I've decided not to expose my email addresses/configs here. Apologies for those who may be looking for an example!

If you're looking for help with mu/4e I strongly suggest checking out [[https://www.youtube.com/watch?v=yZRyEhi4y44&list=PLEoMzSkcN8oM-kA19xOQc8s0gr0PpFGJQ][System Crafters]]
#+begin_src elisp
(load-file "~/.config/emacs/mu4e-config.el")
#+end_src

*** Ledger
Knowing what resources you have at your disposal and learning how to budget are powerful things.

#+begin_src elisp
(use-package ledger-mode
  :hook (ledger-mode . (lambda()
                         (flycheck-mode)
                         (company-mode)))
  :custom
  (ledger-report-use-native-highlighting t)
  :ensure t)
#+end_src

*** Projectile                                                   :disabled:
#+begin_src elisp :tangle no
(straight-use-package 'projectile)
(setq projectile-project-search-path '(("~/Projects/" . 3) "/srv/www"))
(setq projectile-enable-caching t)
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src

*** RG
#+begin_src elisp
(progn
  (straight-use-package 'rg)
  (rg-enable-default-bindings))
#+end_src

*** Treemacs
The most feature-complete side-bar "file explorer".
#+begin_src elisp
(straight-use-package 'treemacs)
(dolist (combo '(("C-x t 1"   . treemacs-delete-other-windows)
                 ("C-x t t"   . treemacs)
                 ("C-x t B"   . treemacs-bookmark)
                 ("C-x t C-t" . treemacs-find-file)
                 ("C-x t M-t" . treemacs-find-tag)))
  (global-set-key (kbd (car combo)) (cdr combo)))

;; Not sure if this required
;; (straight-use-package 'treemacs-icon-dired)
;; (add-hook 'dired-mode-hook #'treemacs-icons-dired-enable-once)

(with-eval-after-load 'treemacs
  (straight-use-package 'treemacs-magit))
#+end_src

*** Undo-Tree
Mostly want undo tree for better redo support for Evil

#+begin_src elisp
(straight-use-package 'undo-tree)
(global-undo-tree-mode)
#+end_src

*** Which-key
What the heck was that keybind again? If you can remember how it starts, which-key can help you find the rest.

#+begin_src elisp
(straight-use-package 'which-key)
(which-key-mode)
#+end_src

** Syntax Support
We're getting into to the language specific stuff now. Much of this is specifically tailored for Shopify, TypeScript and JavaScript development. Many if not all of these features stay out of the way when you're not in the language mode. There's also a very tedious attempt to make all of these disjointed program modes listen to my gosh dang tab-width setting instead of doing their own thing as an insane default.
*** Company Completions                                               :fav:
Completions at point!

#+begin_src elisp
(use-package company
  :ensure t
  :bind (:map company-active-map ("<tab>" . company-complete-selection))
  (:map prog-mode-map ("<tab>" . company-indent-or-complete-common))
  :config
  (setq company-backends '((company-files company-keywords company-capf company-yasnippet)
                           (company-abbrev company-dabbrev)))
  (setq company-idle-delay 0.01))
#+end_src

*** CSS/SCSS

#+begin_src elisp
(add-hook 'css-mode-hook #'(lambda () (setq-local css-indent-offset 2
                                                  tab-width 2)))
#+end_src

*** Emmet
~.Emmet[data-love="true"]~

#+begin_src elisp
(use-package emmet-mode
  :ensure t
  :config
  (setq emmet-expand-jsx-className t)
  :hook
  (sgml-mode-hook . emmet-mode)
  (css-mode-hook . emmet-mode)
  (web-mode . emmet-mode)
  (svelte-mode . emmet-mode))
#+end_src

*** Eglot                                                        :disabled:
Eglot - the rival LSP client to the infamous =lsp-mode=. Eglot claims to be leaner, faster and less intense.
#+begin_src elisp :tangle no
;;; Eglot likes these packages to be up to date.
(straight-use-package 'project)
(straight-use-package 'xref)
(straight-use-package 'eldoc)

;;; Then, thee is Eglot.
(straight-use-package 'eglot)

(with-eval-after-load 'eglot
  (add-to-list 'eglot-server-programs '(php-mode . ("intelephense" "--stdio")))
  (add-to-list 'eglot-server-programs '(svelte-mode . ("svelteserver" "--stdio")))
  (add-to-list 'eglot-server-programs '(shopify-mode
                                        . ("theme-check-language-server" "--stdio")))
  (define-key eglot-mode-map (kbd "C-c r") 'eglot-rename)
  (define-key eglot-mode-map (kbd "C-c o") 'eglot-code-action-organize-imports)
  (define-key eglot-mode-map (kbd "C-c h") 'eldoc)
  (define-key eglot-mode-map (kbd "C-c r") 'xref-find-definitions))

;;; Floating eldoc for eglot
(setq x-gtk-resize-child-frames 'resize-mode)
(straight-use-package 'eldoc-box)
(setq eldoc-box-offset '(16 36 16))

(defun td/eglot-hook ()
  "Functions to call on-eglot."
  (eglot-ensure)
  (company-mode)
  (eldoc-box-hover-mode))

;;; Set-up programming modes to use Eglot
(dolist (mode '(php-mode-hook
                js-mode-hook
                rjsx-mode-hook
                typescript-mode-hook
                svelte-mode-hook))
  (add-hook mode #'td/eglot-hook))
#+end_src

*** Flycheck
#+begin_src elisp
(straight-use-package 'flycheck)
(straight-use-package 'flycheck-ledger)
(dolist (mode '(ledger-mode-hook))
  (add-hook mode #'flycheck-mode))
(global-set-key (kbd "C-c f") #'flycheck-mode)

(define-fringe-bitmap 'flycheck-fringe-bitmap-caret
  (vector #b00000000
          #b00000000
          #b00000000
          #b00000000
          #b00000000
          #b10000000
          #b11000000
          #b11100000
          #b11110000
          #b11100000
          #b11000000
          #b10000000
          #b00000000
          #b00000000
          #b00000000
          #b00000000
          #b00000000))

(with-eval-after-load 'flycheck
  (setq flycheck-checker-error-threshold 1000)
  (flycheck-define-error-level
   'error
   :severity 100
   :compilation-level 2
   :overlay-category 'flycheck-error-overlay
   :fringe-bitmap 'flycheck-fringe-bitmap-caret
   :fringe-face 'flycheck-fringe-error
   :error-list-face 'flycheck-error-list-error)
  (flycheck-define-error-level
   'warning
   :severity 100
   :compilation-level 1
   :overlay-category 'flycheck-warning-overlay
   :fringe-bitmap 'flycheck-fringe-bitmap-caret
   :fringe-face 'flycheck-fringe-warning
   :warning-list-face 'flycheck-warning-list-warning)
  (flycheck-define-error-level
   'info
   :severity 100
   :compilation-level 1
   :overlay-category 'flycheck-info-overlay
   :fringe-bitmap 'flycheck-fringe-bitmap-caret
   :fringe-face 'flycheck-fringe-info
   :info-list-face 'flycheck-info-list-info)
  (require 'flycheck-ledger))
#+end_src

*** Flymake                                                      :disabled:
#+begin_src elisp :toggle no
(straight-use-package 'flymake)
(straight-use-package '(eslint-flymake
                        :provider git
                        :host github
                        :repo "emacs-pe/eslint-flymake"))
(define-fringe-bitmap 'small-right-triangle
  (vector #b00000000
          #b00000000
          #b00000000
          #b00000000
          #b00000000
          #b10000000
          #b11000000
          #b11100000
          #b11110000
          #b11100000
          #b11000000
          #b10000000
          #b00000000
          #b00000000
          #b00000000
          #b00000000
          #b00000000))

(setq flymake-note-bitmap '(small-right-triangle compilation-info))
(setq flymake-error-bitmap '(small-right-triangle compilation-error))
(setq flymake-warning-bitmap '(small-right-triangle compilation-warning))
#+end_src

*** GoLang
#+begin_src elisp
(use-package go-mode
  :ensure t
  :mode "\\.go\\'")
#+end_src

*** Markdown
The free software documentation language of the Internet.

#+begin_src elisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

*** LSP Mode
#+begin_src elisp
(straight-use-package 'lsp-mode)
(straight-use-package 'lsp-ui)
(straight-use-package 'lsp-treemacs)

(dolist (mode '(css-mode-hook
                 scss-mode-hook
                 html-mode-hook
                 js-mode-hook
                 json-mode-hook
                 python-mode-hook
                 php-mode-hook
                 rust-mode-hook
                 scss-mode-hook
                 svelte-mode-hook
                 typescript-mode-hook
                 vue-mode-hook
                 yaml-mode-hook))
  (add-hook mode #'lsp))

(with-eval-after-load 'lsp-mode
  (setq lsp-log-io nil
        lsp-enable-folding nil
        lsp-clients-typescript-server-args '("--stdio"
                                             "--tsserver-log-file"
                                             "/dev/stderr"))
  (add-to-list
   'lsp-file-watch-ignored-directories "[/\\]env' [/\\]__pycache__'"))

(setq lsp-keymap-prefix "C-c l"
      lsp-ui-sideline-enable t
      lsp-ui-sideline-update-mode 'line
      lsp-ui-sideline-show-symbol nil
      lsp-ui-sideline-show-hover nil
      lsp-ui-doc-enable t
      lsp-ui-doc-show-with-cursor t
      lsp-ui-peek-enable t
      lsp-ui-imenu-window-width 350)

(defun td/on-lsp-mode()
  "Things to do when LSP Mode starts."
  (company-mode))

(add-hook 'lsp-mode-hook #'td/on-lsp-mode)

(with-eval-after-load 'lsp-mode
  ;; Shopify theme-check support
  (add-to-list 'lsp-language-id-configuration
               '(shopify-mode . "shopify"))

  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection "theme-check-language-server")
                    :activation-fn (lsp-activate-on "shopify")
                    :server-id 'theme-check)))

(with-eval-after-load 'lsp-treemacs
  (lsp-treemacs-sync-mode 1))
#+end_src

*** Org                                                               :fav:
Customizations for what is one of the best features that emacs comes with. If we weren't so hung up on Markdown for developer docs, I'd use this mode for everything doc related. Yes, I can export an org file. If I want to track two files, that is. The fancy font-size setup is stolen from [[https://github.com/daviwil/emacs-from-scratch][Emacs from Scratch]] by [[https://www.youtube.com/c/SystemCrafters][System Crafters]]. Check them out :)

#+begin_src elisp
(defvar td/tag-list
  '((:startgroup)
    ;; Put mutually exclusive tags here
    (:endgroup)
    ("@home" . ?H)
    ("@work" . ?W)
    ("urgent" . ?U)
    ("learning" . ?l)
    ("foss" . ?f)
    ("gurps" . ?g)
    ("blog" . ?b)
    ("idea" . ?i))
  "The tags for org headlines.")

(defvar td/todo-keywords
`((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
  (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)"
            "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)"))
  "A sequence of keywords for Org headlines.")

(defvar td/org-agenda-commands
  '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
     (todo "NEXT"
           ((org-agenda-overriding-header "Next Tasks")))
     (tags-todo "agenda/ACTIVE"
                ((org-agenda-overriding-header "Active Projects")))))
   ("n" "Next Tasks"
    ((todo "NEXT"
           ((org-agenda-overriding-header "Next Tasks")))))
   ("g" "GURPS" tags-todo "+gurps")
   ("U" "Urgent Tasks" tags-todo "+urgent")
   ;; Low-effort next actions
   ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
    ((org-agenda-overriding-header "Low Effort Tasks")
     (org-agenda-max-todos 20)
     (org-agenda-files org-agenda-files)))
   ("w" "Workflow Status"
    ((todo "WAIT"
           ((org-agenda-overriding-header "Waiting on External")
            (org-agenda-files org-agenda-files)))
     (todo "REVIEW"
           ((org-agenda-overriding-header "In Review")
            (org-agenda-files org-agenda-files)))
     (todo "PLAN"
           ((org-agenda-overriding-header "In Planning")
            (org-agenda-todo-list-sublevels nil)
            (org-agenda-files org-agenda-files)))
     (todo "BACKLOG"
           ((org-agenda-overriding-header "Project Backlog")
            (org-agenda-todo-list-sublevels nil)
            (org-agenda-files org-agenda-files)))
     (todo "READY"
           ((org-agenda-overriding-header "Ready for Work")
            (org-agenda-files org-agenda-files)))
     (todo "ACTIVE"
           ((org-agenda-overriding-header "Active Projects")
            (org-agenda-files org-agenda-files)))
     (todo "COMPLETED"
           ((org-agenda-overriding-header "Completed Projects")
            (org-agenda-files org-agenda-files)))
     (todo "CANC"
           ((org-agenda-overriding-header "Cancelled Projects")
            (org-agenda-files
             org-agenda-files))))))
  "Custom commands for Org Agenda.")

(add-hook 'org-mode-hook 'td/org-hook)
(require 'ox-md nil t)
(global-set-key (kbd "C-c a") 'org-agenda)
(define-key org-mode-map (kbd "C-c t") 'org-table-export)

(setq org-fontify-quote-and-verse-blocks t
      org-directory "~/Org"
      org-archive-location "archives/%s_archive::"
      org-log-done 'time
      org-log-into-drawer t
      org-enforce-todo-dependencies t
      org-enforce-todo-checkbox-dependencies t
      org-src-preserve-indentation t
      org-clock-persist 'history
      org-agenda-block-separator "──────────"
      org-duration-format '(("h" . nil) (special . 2))
      org-clock-total-time-cell-format "%s"
      org-agenda-files '("~/Org")
      org-tag-alist td/tag-list
      org-todo-keywords td/todo-keywords
      org-clock-sound "~/.config/emacs/inspectorj_bell.wav"
      org-timer-default-timer "25"
      org-agenda-custom-commands td/org-agenda-commands)

(setq org-capture-templates
      '(("c" "Cookbook" entry (file "~/org/cookbook.org")
         "%(org-chef-get-recipe-from-url)"
         :empty-lines 1)
        ("m" "Manual Cookbook" entry (file "~/org/cookbook.org")
         "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :servings:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n  :END:\n** Ingredients\n   %?\n** Directions\n\n")))

(straight-use-package 'org-chef)

(straight-use-package
 '(org-view-mode :type git :host github :repo "amno1/org-view-mode"
                 :fork (:host github :repo "trev-dev/org-view-mode")))

(straight-use-package 'org-bullets)
(setq org-bullets-bullet-list '("◉" "○" "•" "·"))

  ;; :config
  ;; ;; Set faces for heading levels
  ;; (dolist (face '((org-level-1 . 1.2)
  ;;                 (org-level-2 . 1.1)
  ;;                 (org-level-3 . 1.05)
  ;;                 (org-level-4 . 1.0)
  ;;                 (org-level-5 . 1.1)
  ;;                 (org-level-6 . 1.1)
  ;;                 (org-level-7 . 1.1)
  ;;                 (org-level-8 . 1.1)))
  ;;   (set-face-attribute (car face) nil :weight 'semi-bold :height (cdr face)))

(straight-use-package 'ox-gfm)

(straight-use-package 'visual-fill-column)
(define-key org-mode-map (kbd "C-c v") 'visual-fill-column-mode)

(defun org-visual-fill-setup()
  "Center the column 100 characters wide"
  (setq-local visual-fill-column-width 100
              visual-fill-column-center-text nil)
  (visual-fill-column-mode 1))

(straight-use-package 'org-alert)
(with-eval-after-load 'org-alert
  alert-default-style 'libnotify
  org-alert-interval 7200
  org-alert-notify-cutoff 60
  org-alert-notification-title "Org Agenda"
  (org-alert-enable))

(defvar td/org-auto-toc-files
  '("~/.config/emacs/config.org")
  "Files that should auto-toc on save.")

(defun td/set-auto-toc ()
  "Set auto-toc if buffer in auto-toc-files."
  (if (member
       (buffer-file-name)
       (mapcar 'expand-file-name td/org-auto-toc-files))
      (progn
        (org-make-toc-mode)
        (message "Org make TOC mode is on!"))))

(straight-use-package 'dash)
(straight-use-package 's)
(straight-use-package 'org-make-toc)

(defun td/org-hook ()
  "Do this on org mode startup."
  (org-indent-mode)
  (yas-minor-mode)
  (org-clock-persistence-insinuate)
  (org-bullets-mode 1)
  (org-visual-fill-setup)
  (td/set-auto-toc))
#+end_src

**** Custom Clock Table
I decided to write a [[file:td-custom-clocktable.el?ts=2][custom clocktable formatter]]. I wanted a neat and tidy way to lay out the hours that I've worked, vs how much effort they should have taken & what that time should be worth when I invoice. I feel like this table is more useful for reporting to certain subcontracts.

#+begin_src elisp
(load-file "~/.config/emacs/td-custom-clocktable.el")
#+end_src

Here's an example:
#+BEGIN: clocktable :scope ("clocktable-example.org") :maxlevel 3 :properties ("Comment" "Effort") :formatter td/custom-clocktable
#+CAPTION: Clock summary at [2022-01-13 Thu 17:57]
| Task              | Est   | Time   | Billable | Comment                |
|-------------------+-------+--------+----------+------------------------|
| Client            |       | 8.00h  | $520.00  |                        |
| — Task B          |       | 2.00h  | $130.00  | This is taking a while |
| — Task A          |       | 6.00h  | $390.00  |                        |
|-------------------+-------+--------+----------+------------------------|
| Client B          |       | 12.43h | $807.95  |                        |
| — Special Project |       | 12.00h | $780.00  |                        |
| —— Task C         | 9.00h | 8.00h  | $520.00  |                        |
| —— Task D         |       | 4.00h  | $260.00  |                        |
| — Unrelated Task  |       | 0.43h  | $27.95   |                        |
|-------------------+-------+--------+----------+------------------------|
| Totals            |       | 20.43h | $1327.95 |                        |
#+END

*** PHP

#+begin_src elisp
(define-derived-mode php-mode web-mode "PHP"
  "I just want web-mode highlighting with .svelte files")

(defun td/get-intelephense-key ()
  "Get my intelephense license key."
  (with-temp-buffer
    (insert-file-contents "~/Documents/intelephense.txt")
    (buffer-string)))

(defun td/get-wordpress-stubs ()
  "The stubs required for a WordPress Project"
  (json-insert ["apache" "bcmath" "bz2" "calendar" "com_dotnet" "Core"
   "ctype" "curl" "date" "dba" "dom" "enchant" "exif"
   "fileinfo" "filter" "fpm" "ftp" "gd" "hash" "iconv" "imap"
   "interbase" "intl" "json" "ldap" "libxml" "mbstring"
   "mcrypt" "meta" "mssql" "mysqli" "oci8" "odbc" "openssl"
   "pcntl" "pcre" "PDO" "pdo_ibm" "pdo_mysql" "pdo_pgsql"
   "pdo_sqlite" "pgsql" "Phar" "posix" "pspell" "readline"
   "recode" "Reflection" "regex" "session" "shmop" "SimpleXML"
   "snmp" "soap" "sockets" "sodium" "SPL" "sqlite3" "standard"
   "superglobals" "sybase" "sysvmsg" "sysvsem" "sysvshm" "tidy"
   "tokenizer" "wddx" "xml" "xmlreader" "xmlrpc" "xmlwriter"
   "Zend OPcache" "zip" "zlib" "wordpress"]))

(provide 'php-mode)
(add-to-list 'auto-mode-alist '("\\.php\\'" . php-mode))
(add-to-list 'auto-mode-alist '("\\.twig\\'" . php-mode))
#+end_src

*** Prettier
An opinionated way to clean up my web-dev code quickly.

#+begin_src elisp
(use-package prettier-js
  :ensure t)
#+end_src

*** Prog Mode
A few settings that are useful in programming buffers

#+begin_src elisp
(defun td/toggle-indent-tabs-mode ()
  "Toggle `indent-tabs-mode'."
  (interactive)
  (setq-local indent-tabs-mode (not indent-tabs-mode)))

(defun td/infer-indentation-style ()
  ;; if our source file uses tabs, we use tabs, if spaces spaces, and if
  ;; neither, we use the current indent-tabs-mode
  (let ((space-count (how-many "^  "))
        (tab-count (how-many "^\t")))
    (if (> space-count tab-count)
        (setq indent-tabs-mode nil))
    (if (> tab-count space-count)
        (setq indent-tabs-mode t))))

(defun td/prog-mode-settings ()
  (setq whitespace-style '(face tabs tab-mark trailing))
  (setq whitespace-display-mappings '((tab-mark 9 [9474 9] [92 9])))
  (custom-set-faces
   '(whitespace-tab ((t (:foreground "#636363")))))
  (setq-local fill-column 80)
  (setq-local show-trailing-whitespace t)
  (show-paren-mode t)
  (hs-minor-mode)
  (display-line-numbers-mode)
  (display-fill-column-indicator-mode)
  (electric-pair-local-mode)
  (yas-minor-mode)
  (td/infer-indentation-style)
  (whitespace-mode))

;; I want a way to tab over relative similar tab-to-tab-stop
(setq indent-tabs-mode nil)
(setq standard-indent 2)
(setq backward-delete-char-untabify-method 'hungry)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq-default evil-shift-width 2)
(setq-default electric-indent-inhibit t)

(dolist (combo '(("C-c i" . td/toggle-indent-tabs-mode)
                 ("C-i" . indent-relative)))
  (define-key prog-mode-map (kbd (car combo)) (cdr combo)))

(add-hook 'prog-mode-hook 'td/prog-mode-settings)
#+end_src

*** Python
<3 Python

#+begin_src elisp
(use-package pyvenv :ensure t)
(use-package pipenv
  :ensure t
  :hook (python-mode . pipenv-mode))
#+end_src

*** Rainbow Delimiters
This comes in handier than you think it would. Especially with these (lisp '((config . files)))

#+begin_src elisp
(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

*** Rainbow Mode
LSP-Mode covers making visual representations of hex color codes almost everywhere I need it. For everywhere else there's rainbow-mode

#+begin_src elisp
(use-package rainbow-mode :ensure t)
#+end_src

*** Rust
#+begin_src elisp
(use-package rust-mode
  :ensure t
  :bind (:map rust-mode-map ("C-c c r" . rust-run) ("C-c c a r" . td/rust-run-args)))

(defun td/rust-run-args (s)
  (interactive "sOptional Args:")
  (rust--compile (concat "%s run " s) rust-cargo-bin))
#+end_src

*** Shopify Mode
This is where I turn emacs into a usuable IDE for Shopify themes. I use regexp to tell emacs to use s/css-mode for css liquid, then register an LSP client for the [[https://shopify.dev/themes/tools/theme-check#using-theme-check-in-other-editors][theme-check-language-server]].

#+begin_src elisp
                                        ; Derive liquid-mode from web-mode
(define-derived-mode shopify-mode web-mode "Shopify"
  "Use web mode to highlight shopify liquid files")
(provide 'shopify-mode)

(add-to-list 'auto-mode-alist '("\\.liquid\\'" . shopify-mode))

(defvar liquid-electric-pairs '((?% . ?%)) "Electric pairs for liquid syntax.")

(defun liquid-add-electric-pairs ()
  (setq-local electric-pair-pairs (append electric-pair-pairs liquid-electric-pairs))
  (setq-local electric-pair-text-pairs electric-pair-pairs))

(add-hook 'shopify-mode-hook #'liquid-add-electric-pairs)
#+end_src

*** Svelte
Fake-out a "svelte-mode" for the purposes of activating with the svelte-language-server. I'm extending web-mode because it highlights =.svelte= files well.

#+begin_src elisp
(define-derived-mode svelte-mode web-mode "Svelte"
  "I just want web-mode highlighting with .svelte files")
(provide 'svelte-mode)
(add-to-list 'auto-mode-alist '("\\.svelte\\'" . svelte-mode))
#+end_src

*** Treesitter                                                        :fav:
Tree-sitter is an impressive project. It delivers exceptionally rich syntax highlighting for things like emacs/vim. A little tricky to theme, though, as it has a billion font lock faces and every tree-sitter syntax config may or may not use them the same way. I try to avoid looking a gift horse in the mouth.

#+begin_src elisp
(straight-use-package 'tree-sitter)
(straight-use-package 'tree-sitter-langs)
(require 'tree-sitter)
(require 'tree-sitter-langs)
(global-tree-sitter-mode 1)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src

*** TypeScript & JavaScript
#+begin_src elisp
(straight-use-package 'typescript-mode)
(straight-use-package 'js2-mode)
(straight-use-package 'prettier-js)
(add-hook 'js-mode-hook
          #'(lambda()
              (unless (string-match ".*\.json$" buffer-file-name)
                (js2-minor-mode))))
(setq js-indent-level 2
      typescript-indent-level 2
      js2-strict-inconsistent-return-warning nil)
#+end_src

*** VueJS
#+begin_src elisp
(define-derived-mode vue-mode web-mode "VueJS"
  "I just want web-mode highlighting with .svelte files")
(provide 'vue-mode)
(add-to-list 'auto-mode-alist '("\\.vue\\'" . vue-mode))
#+end_src

*** Web Mode                                                          :fav:
There isn't a much better catch-all for web template syntax support than web-mode. It works well with Liquid syntax files. It also comes with it's own divergent, insane defaults that I have to choke out.

#+begin_src elisp
(defun customize-web-mode ()
  "Customizations for web mode"
  (setq web-mode-markup-indent-offset tab-width
        web-mode-code-markup-indent-offset tab-width
        web-mode-style-padding tab-width
        web-mode-script-padding tab-width
        web-mode-block-padding tab-width
        web-mode-enable-auto-indentation nil
        web-mode-enable-auto-pairing nil))

(straight-use-package 'web-mode)
(add-hook 'web-mode-hook #'customize-web-mode)

(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
#+end_src

*** YAML
YAML's a really nice way to configure software, containers and projects. I use it when I can.
#+begin_src elisp
(use-package yaml-mode
  :ensure t)
#+end_src

*** Yasnippet
Snippets! They're helpful.
#+begin_src elisp
(use-package yasnippet
  :ensure t
  :config
  (yas-reload-all)
  :custom
  (yas-snippet-dirs '("~/.config/emacs/yasnippets")))

(use-package yasnippet-snippets
  :ensure t)
#+end_src

** About This Config
This literate configuration is a labour of love from a man who changes his mind and mixes things up /often/.

I'm not sure it will ever be finished or perfect. At times, things may clunk. I will do my best to clunk them in another branch.

If you like this config the way you found it, make sure that you fork it or make note of which commit you preferred.

*** Installation
If you've decided to fork this repository and wish to use it as-is, here are the steps you'll need to take.

*Note*: Config us currently set up for Emacs 29. Be sure to disable the weird bits, like [[* Performance Tweaks][compilation deferral]].

1. Clone this repository to =~/.config/emacs=
2. Symlink =init.el= to your home directory: =ln -s ~/.emacs.el ~/.config/emacs/init.el=
3. Make sure you clear out any existing configs in =~/.emacs.d= and =rm -rf ~/.emacs.d/elpa= to clear your existing packages.
4. Run emacs for the first time.

*** Current Mindset
At the moment I'm striving for a mix of powerful flexibility & style whilst keeping as much of the package bloat down as I can. I feel like this is going poorly, but it's getting better over time.

I have some configs here that are tagged as either :fav: or :disabled:

As I play with this config and refine my preferences I've lost the point in deleting/re-adding perfectly good configs that I may want to revist. If you see something you like, by all means, enable it. It /should/ work. Headings tagged with :disabled: are simply set to =:tangle no=.

*** Licenses
- For the [[file:inspectorj_bell.wav][bell sound]]: "Bell, Candle Damper, A (H4n).wav" by InspectorJ (www.jshaw.co.uk) of Freesound.org (Creative Commons - CC BY 3.0)
