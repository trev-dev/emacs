* Emacs Configuration
:PROPERTIES:
#+STARTUP: content
:END:
Herein lies my Emacs configuration. Use it well.
** General Settings
Some general performance based improvements. Reset GC after init as it is maxed out in [[file:early-init.el][early init]].

#+BEGIN_SRC elisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold (expt 2 23))))

(setq read-process-output-max (* 1024 1024))

;; Don't die when handling large, minified files
(global-so-long-mode 1)

;; For native compilation with Emacs 28+
(setq comp-deferred-compilation t)
#+END_SRC

Clear out most of the GUI clutter, display relative line numbers, highlight the line I'm on, smaller left-only fringe, quick yes/no answers, some prog-mode QOL settings as well.

#+BEGIN_SRC elisp
;; Interface
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(blink-cursor-mode 1)
(setq display-line-numbers-type 'relative
      inhibit-startup-screen t
      initial-scratch-message ""
      history-length 25
      sentence-end-double-space nil
      visible-bell t)
(global-visual-line-mode 1)
(recentf-mode 1)
(save-place-mode 1)
(global-auto-revert-mode 1)
(fringe-mode '(4 . 0))
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Set up the dictionary and preferred browser.

#+BEGIN_SRC elisp
;; Spelling
(setq ispell-personal-dictionary "~/.config/emacs/personal-dict.pwd"
      ispell-program-name "aspell"
      ispell-dictionary "en"
      ispell-library-directory "~/.guix-home/profile/lib/aspell"
      ispell-alternate-dictionary (concat (getenv "HOME") "/Documents/wordlist"))
;; Browser
(setq browse-url-generic-program "/usr/bin/firefox")
#+END_SRC

I hate seeing project folders get all cluttered up. Let's move autosaves and backups somewhere else.

#+BEGIN_SRC elisp
;; Put autosave files (ie #foo#) and backup files (ie foo~) in ~/.emacs.d/.
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/autosaves/" t))
      backup-directory-alist '((".*" . "~/.emacs.d/backups/")))

;; create the autosave dir if necessary, since emacs won't.
(make-directory "~/.emacs.d/autosaves/" t)

(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+END_SRC


I want to use emacs for pinentry whenever that may apply. This needs to be paired with ~/.gnupg/gpg-agent.conf with the =allow-emacs-pinentry= rule.

#+BEGIN_SRC elisp
(pinentry-start)
#+END_SRC

Don't pause the search while wrapping, just flash so we know we wrapped in isearch-mode.

#+BEGIN_SRC elisp
(setq isearch-wrap-pause 'no)
#+END_SRC

** Helper Functions
Functions that help me with configuration.

#+BEGIN_SRC elisp
(defun td/bind-keys (conses &optional mode-map)
  "Bind several keybinds using a list of `CONSES'.
Binds will be global unless the optional `MODE-MAP' is specified."
  (dolist (combo conses)
    (if (or (consp mode-map) (keymapp mode-map))
        (define-key mode-map (kbd (car combo)) (cdr combo))
      (if mode-map (warn "Optional %s `MODE-MAP' was invalid: %s" (type-of mode-map) mode-map))
      (global-set-key (kbd (car combo)) (cdr combo)))))

(defun td/add-hooks (modes func)
  "Set several hooks from a list of `CONSES'.
Adds '-hook' onto the end of the symbols for brevity."
  (dolist (mode modes)
    (add-hook (intern (concat (symbol-name mode) "-hook")) func)))

(defun td/auto-mode (modes)
  "Add the `MODES' to the `auto-mode-alist'."
  (dolist (mode modes)
    (add-to-list 'auto-mode-alist mode)))

(defun td/filter-nil (seq)
  "Filter out nil items from sequence `SEQ'."
  (seq-filter #'(lambda (item) item) seq))
#+END_SRC

Create a mode for mapping high priority keybinds early on.

*** Priority Mode

I am creating "Priority Mode," which has an emulation-mode keymap. Keybindings assigned to this mode will not be over-written by other modes.

#+BEGIN_SRC elisp
(define-minor-mode priority-mode
  "A minor mode for short-listing keybindings.
This will prevent other modes form overriding keys that I would prefer to
see bound."
  :init-value nil
  :global t
  :keymap (make-sparse-keymap))
(add-to-list 'emulation-mode-map-alists `((priority-mode . ,priority-mode-map)))
(priority-mode)
#+END_SRC

** Prog Mode
A few settings that are useful in programming buffers

#+BEGIN_SRC elisp
(defun td/toggle-indent-tabs-mode ()
  "Toggle `indent-tabs-mode'."
  (interactive)
  (setq-local indent-tabs-mode (not indent-tabs-mode)))

(defun td/infer-indentation-style ()
  ;; if our source file uses tabs, we use tabs, if spaces spaces, and if
  ;; neither, we use the current indent-tabs-mode
  (let ((space-count (how-many "^  "))
        (tab-count (how-many "^\t")))
    (if (> space-count tab-count)
        (setq indent-tabs-mode nil))
    (if (> tab-count space-count)
        (setq indent-tabs-mode t))))

(defun td/prog-mode-settings ()
  (setq whitespace-style '(face tabs tab-mark trailing))
  (setq whitespace-display-mappings '((tab-mark 9 [9474 9] [92 9])))
  (custom-set-faces
   '(whitespace-tab ((t (:foreground "#636363")))))
  (setq-local fill-column 80)
  (setq-local show-trailing-whitespace t)
  (show-paren-mode t)
  (hs-minor-mode)
  (display-line-numbers-mode)
  (display-fill-column-indicator-mode)
  (electric-pair-local-mode)
  (yas-minor-mode)
  (td/infer-indentation-style)
  (whitespace-mode))

;; I want a way to tab over relative similar tab-to-tab-stop
(setq indent-tabs-mode nil)
(setq standard-indent 2)
(setq backward-delete-char-untabify-method 'hungry)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq-default evil-shift-width 2)
(setq-default electric-indent-inhibit t)

(add-hook 'prog-mode-hook 'td/prog-mode-settings)
#+END_SRC

** Package Configuration
*** Bootstrapping
I am using the built-in =package.el= for my package needs. I am using Quelpa for developing/contributing upstream, or installing some obscure package from source.

**** Repositories

#+BEGIN_SRC elisp
(require 'package)
(dolist (repo '(("elpa" . "https://elpa.gnu.org/packages/")
                ("melpa" . "https://melpa.org/packages/")
                ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (add-to-list 'package-archives repo))
#+END_SRC

**** Maintaining selected packages
The goal is to keep my init lean and simple. I personally feel like ~use-package~ is overkill for my needs, but I want my init to be a little more terse.

I also don't want to maintain my ~package-select-packages~ separate from my package configurations. Having to maintain packages in 2 places feels unweildy.

To solve this problem I have written a "package queuing" system where configurations are added to a list and then processed after.

#+BEGIN_SRC elisp
(defmacro td/add-setup (pkg &rest conf)
  "Add `PKG' symbol and `CONF' field to the package setup queue.
If `PKG' is nil, it is assumed that the `CONF' is for something built-in."
  (declare (indent 1))
  (unless (boundp 'td/package-list)
    (defvar td/package-list '() "The package configuration queue."))
  `(add-to-list
    'td/package-list
    (cons ,pkg #'(lambda () ,@conf))))

(defun td/extract-package-names (pkg-list)
  "Retrieve a list of package symbols from a `PKG-LIST'."
  (td/filter-nil (mapcar #'car pkg-list)))

(defun td/setup-packages ()
  "Setup queued packages in `td/package-list'.
  This is meant to be run once at the end of package configuration."
  (when (boundp 'td/package-list)
    (let ((packages (td/extract-package-names td/package-list)))
      (when (seq-some #'(lambda (pkg) (not (package-installed-p pkg))) packages)
        (setq package-selected-packages packages)
        (package-refresh-contents)
        (package-install-selected-packages t)))
    (dolist (conf td/package-list)
      (let ((setup (cdr-safe conf)))
        (when (functionp setup)
          (funcall setup))))
    (add-hook 'after-init-hook
              #'(lambda ()
                  (customize-save-variable
                   'package-selected-packages
                   (td/extract-package-names td/package-list))
                  (makunbound 'td/package-list)))))
#+END_SRC

**** Quelpa
Bootstrap Quelpa if it is missing, then define a macro for a more intuitive way to install missing packages from remotes.

#+BEGIN_SRC elisp
(unless (package-installed-p 'quelpa)
  (with-temp-buffer
    (url-insert-file-contents   "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
    (eval-buffer)
    (quelpa-self-upgrade)))
(setq quelpa-update-melpa-p nil)

(defmacro quelpa-get (pkg &rest method)
  "Use quelpa to retrieve some external `PKG', pass on `METHOD' to quelpa.
This should improve init by not looking for things we already have."
  `(unless (package-installed-p ',pkg)
     (quelpa '(,pkg ,@method))))

(td/add-setup 'quelpa)
#+END_SRC

*** Look & Feel
**** All The Icons

#+BEGIN_SRC elisp
(td/add-setup 'all-the-icons
  (require 'all-the-icons))
#+END_SRC

**** Dired

#+BEGIN_SRC elisp
(td/add-setup 'all-the-icons-dired
  (with-eval-after-load 'all-the-icons
    (setq all-the-icons-dired-monochrome nil)
    (add-hook
     'dired-mode-hook #'(lambda ()
                          (when (display-graphic-p)
                            (all-the-icons-dired-mode))
                          (dired-hide-details-mode)))))
#+END_SRC
**** Diminish
Diminish allows us to tidy up the mode-line by removing or exchanging "lighter" text output from the =minor-mode-alist=. Due to how lazy-loading works, we want to make sure we have diminish early on.

#+BEGIN_SRC elisp
(unless (package-installed-p 'diminish)
  (package-refresh-contents)
  (package-install 'diminish))

(td/add-setup 'diminish)

(dolist (mode '(("company" 'company-mode)
                ("hideshow" 'hs-minor-mode)
                ("undo-tree" 'undo-tree-mode)
                ("whitespace" 'whitespace-mode)
                ("yasnippet" 'yas-minor-mode)
                ("which-key" 'which-key-mode)
                ("org-indent" 'org-indent-mode)
                ("simple" 'visual-line-mode)
                ("eldoc" 'eldoc-mode)
                ("flymake" 'flymake-mode)
                ("tree-sitter" 'tree-sitter-mode "TS")
                ("god-mode" 'god-local-mode)
                ("beacon" 'beacon-mode)
                ("goggles" 'goggles-mode)))
  (eval-after-load (car mode)
    `(diminish ,(cadr mode) ,(caddr mode))))

(with-eval-after-load 'meow
  (dolist (mode (list 'meow-normal-mode
                      'meow-insert-mode
                      'meow-motion-mode
                      'meow-keypad-mode))
    (diminish mode)
    (diminish 'meow-beacon-mode (propertize " 🐾" 'face 'warning))))
#+END_SRC

**** COMMENT Doom Themes
Doom's themes are hard to beat. They're easy to install, highly customizable and hackable. Writing my own theme is easy.

#+BEGIN_SRC elisp
(td/add-setup 'doom-themes
  (add-to-list 'custom-theme-load-path "~/.config/emacs/themes")
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t
        doom-themes-padded-modeline 1)
  (load-theme 'doom-material-dark-devel t)
  (enable-theme 'doom-material-dark-devel)
  (doom-themes-org-config))
#+END_SRC

**** Custom Theme
I've written my own theme called "tangonov".

#+BEGIN_SRC elisp
(add-to-list 'custom-theme-load-path "~/Projects/tangonov-theme/")
(load-theme 'tangonov t)
(enable-theme 'tangonov)
#+END_SRC

**** Font Setup

#+BEGIN_SRC elisp
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
(add-to-list 'default-frame-alist '(font . "Hack 12"))
#+END_SRC
**** Modeline

#+BEGIN_SRC elisp
(defun vc-dirty-p ()
  "Return t if local repository is dirty."
  (with-temp-buffer
    (vc-git-command t 0 nil "status" "--porcelain")
    (> (buffer-size) 0)))

(defun tdm/vc ()
  (when-let (vc vc-mode)
    (format "[%s]:" (propertize
                    (substring vc-mode 5) 'face (if (vc-dirty-p)
                                                    'warning
                                                  'success)))))

(defcustom td/custom-project-name nil
  "A custom directory-local name for a project.el project"
  :type 'string)

(defun tdm/project()
  "Display the current project name, or path."
  (when (project-current)
    (propertize (if (stringp td/custom-project-name)
                    td/custom-project-name
                  (file-name-nondirectory
                  (directory-file-name
                    (project-root (project-current)))))
                'face 'success
                'help-echo "Switch project"
                'mouse-face '(:box 1)
                'local-map (make-mode-line-mouse-map
                            'mouse-1 #'project-switch-project))))

(defun tdm/modal-face (str base)
  (propertize str 'face
              `(:inherit ,base :weight bold :height 0.9)))

(defvar td/custom-meow-states `((normal . ,(tdm/modal-face
                                            "<N>" '(:foreground "#FFCA41")))
                                (motion . ,(tdm/modal-face
                                            "<M>" '(:foreground "#82AAFF")))
                                (keypad . ,(tdm/modal-face
                                            "<K>" '(:foreground "#89DDFF")))
                                (insert . ,(tdm/modal-face
                                            "<I>" '(:foreground "#C792EA")))
                                (beacon . ,(tdm/modal-face
                                            "<B>" '(:foreground "#FF7B85")))))

(defvar tdm/meow-state
  '(:eval (when (featurep 'meow)
            (concat (alist-get (meow--current-state) td/custom-meow-states)
                    " "))))

(defvar tdm/god-state
  '(:eval (when (featurep 'god-mode)
            (format "%s " (if god-local-mode
                              (tdm/modal-face "<G>" 'all-the-icons-lyellow)
                            (tdm/modal-face "---" 'all-the-icons-lpurple))))))

(defun tdm/status-flag (on face)
  "Produce a status flag based on some `PRED'icate test and give it a `FACE'."
  (format "%s" (if on
                   (propertize "▰" 'face `(:inherit ,face :weight bold))
                 "-")))

(defvar tdm/left (list " " tdm/god-state tdm/meow-state
                       '(:eval (tdm/project))
                       '(:eval (tdm/vc))
                       "%b (%I) "
                       '(:eval (tdm/status-flag buffer-read-only 'error))
                       '(:eval (tdm/status-flag (buffer-modified-p) 'warning))
                       '(:eval (if (not (eq
                                      (format-mode-line mode-line-client)
                                      ""))
                                   (tdm/status-flag t '(:foreground "#C792EA"))
                                 "")))
  "The cluster of left-hand side mode-line constructs.")

(defun tdm/middle-gap (len)
  "Create gap that is offset by some `LEN' of right-hand mode-line constructs."
  (propertize
   " " 'display
   `((space :align-to (- (+ right right-fringe right-margin)
                         ,(+ 0 len))))))

(defun tdm/eglot ()
  "It's the same eglot indicator, but with the server name removed.
I wanted and indicator that took up less space on the modeline."
  (when (and (featurep 'eglot) eglot--managed-mode)
    (pcase-let* ((server (eglot-current-server))
                 (nick (and server (eglot-project-nickname server)))
                 (pending (and server (hash-table-count
                                       (jsonrpc--request-continuations server))))
                 (`(,_id ,doing ,done-p ,_detail) (and server (eglot--spinner server)))
                 (last-error (and server (jsonrpc-last-error server))))
      (append
       `(,(propertize
           eglot-menu-string
           'face 'eglot-mode-line
           'mouse-face 'mode-line-highlight
           'help-echo
           "Eglot: Emacs LSP client\nmouse-1: Display minor mode menu"
           'keymap (let ((map (make-sparse-keymap)))
                     (define-key map [mode-line down-mouse-1] eglot-menu)
                     map)))
       (when nick
         `(":"
           ,(propertize
             "on"
             'face 'eglot-mode-line
             'mouse-face 'mode-line-highlight
             'help-echo
             (format "Project '%s'\nmouse-1: LSP server control menu" nick)
             'keymap (let ((map (make-sparse-keymap)))
                       (define-key map
                                   [mode-line down-mouse-1] eglot-server-menu)
                       map))
           ,@(when last-error
               `("/" ,(eglot--mode-line-props
                       "error" 'compilation-mode-line-fail
                       '((mouse-3 eglot-clear-status  "Clear this status"))
                       (format "An error occurred: %s\n"
                               (plist-get last-error
                                          :message)))))
           ,@(when (and doing (not done-p))
               `("/" ,(eglot--mode-line-props doing
                                              'compilation-mode-line-run '())))
           ,@(when (cl-plusp pending)
               `("/" ,(eglot--mode-line-props
                       (format "%d" pending) 'warning
                       '((mouse-3 eglot-forget-pending-continuations
                                  "Forget pending continuations"))
                       "Number of outgoing, \
still unanswered LSP requests to the server\n")))))))))

(setq flymake-mode-line-lighter "fm:")

(defvar tdm/right (list '(:eval (tdm/eglot))
                        " "
                        '(:eval (when flymake-mode
                                  flymake-mode-line-title
                                  flymake-mode-line-exception
                                  flymake-mode-line-counters))
                        " "
                        mode-line-misc-info
                        mode-line-modes
                        "[%p] ")
  "The cluster of right-hand side cluster of mode-line constructs.")

(with-eval-after-load 'all-the-icons
  (setq-default mode-line-format
                (list tdm/left
                      '(:eval (tdm/middle-gap
                               (length
                                (format-mode-line tdm/right))))
                      tdm/right)))
#+END_SRC

***** COMMENT Defaults

#+BEGIN_SRC elisp
;;;; Reference to defaults
("%e" mode-line-front-space
 (:propertize
  ("" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote)
  display
  (min-width
   (5.0)))
 mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position
 (vc-mode vc-mode)
 "  " mode-line-modes mode-line-misc-info mode-line-end-spaces)
#+END_SRC

**** COMMENT Telephone Line
A simple, but nicer looking modeline

#+BEGIN_SRC elisp
(td/add-setup 'telephone-line
  (setq telephone-line-primary-left-separator
        'telephone-line-cubed-left

        telephone-line-secondary-left-separatorn
        'telephone-line-cubed-hollow-left

        telephone-line-primary-right-separator
        'telephone-line-cubed-right

        telephone-line-secondary-right-separator
        'telephone-line-cubed-hollow-right)

  (defface my-emacs
    '((t (:background "#7455ac" :foreground "white" :weight bold)))
    "A face for EMACS that isn't evil.")

  (setq telephone-line-faces
        '((emacs . (my-emacs . telephone-line-accent-inactive))
          (accent . (telephone-line-accent-active
                     . telephone-line-accent-inactive))
          (nil . (mode-line . mode-line-inactive))))

  (defvar td/custom-meow-states '((normal . "EMACS")
                                  (motion . "MOTION")
                                  (keypad . "KEYPAD")
                                  (insert . "INSERT")
                                  (beacon . "BEACON")))

  (telephone-line-defsegment meow-emacs ()
    (alist-get (meow--current-state) td/custom-meow-states))

  (telephone-line-defsegment just-emacs () "EMACS")

  (setq telephone-line-lhs
        '((emacs   . (just-emacs))
          (accent  . (telephone-line-vc-segment
                      telephone-line-erc-modified-channels-segment
                      telephone-line-process-segment))
          (nil     . (telephone-line-project-segment
                      telephone-line-buffer-segment))))

  (setq telephone-line-rhs
        '((nil     . (telephone-line-flymake-segment
                      telephone-line-misc-info-segment))
          (accent  . (telephone-line-major-mode-segment))
          (emacs   . (telephone-line-airline-position-segment))))

  (telephone-line-mode 1))
#+END_SRC

*** Utility Packages
Packages that extend and augment emacs in a general way

**** COMMENT Avy

#+BEGIN_SRC elisp
(td/add-setup 'avy
  (global-set-key (kbd "C-\\") #'avy-goto-char-timer)
  (define-key isearch-mode-map (kbd "C-\\") #'avy-isearch)
  (avy-setup-default))
#+END_SRC

**** Beacon

#+BEGIN_SRC elisp
(td/add-setup 'beacon
  (beacon-mode 1))
#+END_SRC

**** Completions
A combination of packages to enhance completions.

***** COMMENT Company
Completions at point/region.

#+BEGIN_SRC elisp
(defun td/company-prog-hook ()
  "Completions for programming."
  (setq-local company-backends
              '(company-capf
                company-dabbrev-code
                company-files)))

(td/add-setup 'company
  (add-hook 'after-init-hook #'global-company-mode)
  (add-hook 'prog-mode-hook #'td/company-prog-hook)
  (setq company-backends '(company-capf
                           company-ispell
                           company-files)
        company-files-exclusions '(".git/")
        company-idle-delay 0.3))
#+END_SRC

***** Cape
Add completion at point functions for things like Corfu

#+BEGIN_SRC elisp
(td/add-setup 'cape
  (defun td/don-local-cape (comps &optional no-extend)
    "Create a hook function to set local capfs to include `COMPS'.
If `NO-EXTEND' is non-nil, the global capfs will be discarded."
    `(lambda ()
       (setq-local completion-at-point-functions
                   (if ,no-extend
                       ',comps
                     ',(cl-union comps completion-at-point-functions)))))

  (setq cape-dict-file (concat
                        (getenv "HOME")
                        "/Documents/wordlist"))
  (defvar td/capes
    (let ((map (make-sparse-keymap)))
      (td/bind-keys '(("p" . completion-at-point)
                      ("t" . complete-tag)
                      ("d" . cape-dabbrev)
                      ("h" . cape-history)
                      ("f" . cape-file)
                      ("k" . cape-keyword)
                      ("s" . cape-symbol)
                      ("a" . cape-abbrev)
                      ("i" . cape-ispell)
                      ("l" . cape-line)
                      ("w" . cape-dict)
                      ("&" . cape-sgml)
                      ("t" . complete-tag)
                      ("r" . cape-rfc1345)) map)
      map) "Keymap for the various cape completion functions. \\{td/capes}")
  (fset 'td/capes td/capes)
  (global-set-key (kbd "C-c l") 'td/capes)

  (add-hook 'prog-mode-hook (td/don-local-cape (list #'cape-keyword
                                                     #'cape-file
                                                     #'cape-dabbrev)))

  (add-hook 'eshell-mode-hook (td/don-local-cape (list #'cape-history)))

  (add-hook 'emacs-lisp-mode-hook (td/don-local-cape
                                   (list #'cape-symbol
                                         #'cape-keyword
                                         #'cape-file
                                         #'cape-dabbrev) t))

  (add-hook 'geiser-mode-hook (td/don-local-cape
                               (list #'geiser-capf--for-module
                                     #'geiser-capf--for-symbol
                                     #'geiser-capf--for-filename
                                     #'cape-file
                                     #'cape-dabbrev) t))

  (add-hook 'text-mode-hook (td/don-local-cape (list #'cape-dict))))
#+END_SRC

#+BEGIN_SRC elisp
(td/add-setup 'corfu-terminal
  (unless (display-graphic-p)
    (corfu-terminal-mode t)))
#+END_SRC

***** Consult
I am currently giving consult a try as my completion-at-point solution, amongst many
other better ways to reference things in Emacs.

#+BEGIN_SRC elisp
(td/add-setup 'consult
  (require 'consult)
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format
        xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  (td/bind-keys '(("C-c h" . consult-history)
                  ("C-c m" . consult-mode-command)
                  ;; ("C-c k" . consult-kmacro)
                  ;; C-x bindings (ctl-x-map)
                  ("C-x M-:" . consult-complex-command)
                  ("C-x b" . consult-buffer)
                  ("C-x 4 b" . consult-buffer-other-window)
                  ("C-x 5 b" . consult-buffer-other-frame)
                  ("C-x r b" . consult-bookmark)
                  ;; Custom M-# bindings for fast register access
                  ("M-#" . consult-register-load)
                  ("M-'" . consult-register-store)
                  ("C-M-#" . consult-register)
                  ;; Other custom bindings
                  ("M-y" . consult-yank-pop)
                  ("<help> a" . consult-apropos)
                  ;; M-g bindings (goto-map)
                  ("M-g e" . consult-compile-error)
                  ("M-g f" . consult-flymake) ; or flycheck?
                  ("M-g g" . consult-goto-line)
                  ("M-g M-g" . consult-goto-line)
                  ("M-g o" . consult-outline)
                  ("M-g m" . consult-mark)
                  ("M-g k" . consult-global-mark)
                  ("M-g i" . consult-imenu)
                  ("M-g I" . consult-imenu-multi)
                  ;; M-s bindings (search-map)
                  ("M-s d" . consult-find)
                  ("M-s D" . consult-locate)
                  ("M-s g" . consult-grep)
                  ("M-s G" . consult-git-grep)
                  ("M-s r" . consult-ripgrep)
                  ("M-s l" . consult-line)
                  ("M-s L" . consult-line-multi)
                  ("M-s m" . consult-multi-occur)
                  ("M-s k" . consult-keep-lines)
                  ("M-s u" . consult-focus-lines)
                  ;; Isearch integration
                  ("M-s e" . consult-isearch-history)))
  (define-key isearch-mode-map (kbd "M-e") #'consult-isearch-history)
  (add-hook 'completion-list-mode-hook #'consult-preview-at-point-mode)
  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-recent-file consult--source-project-recent-file
   consult--source-bookmark
   :preview-key (kbd "M-."))
  (setq consult-narrow-key "<"
        consult-project-root-function
        (lambda ()
          (when-let (project (project-current))
            (car (project-roots project))))))

(td/add-setup 'consult-flycheck)
#+END_SRC

***** Corfu
Drop-down style completions & related packages

#+BEGIN_SRC elisp
(setq tab-always-indent 'complete)

(td/add-setup 'corfu
  (global-corfu-mode)

  (defun corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer if `completion-at-point' is bound."
    (when (where-is-internal #'completion-at-point (list (current-local-map)))
      (corfu-mode 1)))

  (add-hook 'eshell-mode-hook
            (lambda ()
              (setq-local corfu-auto nil)
              (corfu-mode)))

  (defun corfu-send-shell (&rest _)
    "Send completion candidate when inside comint/eshell."
    (cond
     ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
      (eshell-send-input))
     ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))
      (comint-send-input))))
  (advice-add #'corfu-insert :after #'corfu-send-shell)

  ;; Silence the pcomplete capf, no errors or messages!
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify)

  (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer))
;; Enhance shell completions
(td/add-setup 'pcmpl-args)
#+END_SRC

***** Fussy
Fuzzy Completions

#+BEGIN_SRC elisp
(td/add-setup 'fussy
  (add-to-list 'completion-styles 'fussy t)
  (setq completion-category-defaults nil
        completion-category-overrides nil))
#+END_SRC

***** Kind-Icon

#+BEGIN_SRC elisp
(td/add-setup 'kind-icon
  (with-eval-after-load 'corfu
    (setq kind-icon-default-face 'corfu-default)
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)))
#+END_SRC

***** Marginalia
Better descriptions of symbols in the minibuffer.

#+BEGIN_SRC elisp
(td/add-setup 'marginalia
  (marginalia-mode)
  (define-key minibuffer-local-map (kbd "M-A") #'marginalia-cycle))
#+END_SRC

***** COMMENT Orderless
A completion style that permits entering parts of completion names in any order.

#+BEGIN_SRC elisp
(td/add-setup 'orderless
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides
        '((file (styles . (partial-completion))))))
#+END_SRC

***** Savehist
Save history for Vertico to look at later.

#+BEGIN_SRC elisp
;; Built into emacs 29
(savehist-mode)
#+END_SRC

***** Vertico
Mini-buffer completions back-end.

#+BEGIN_SRC elisp
(td/add-setup 'vertico
  (with-eval-after-load 'consult
    (vertico-mode)
    (setq enable-recursive-minibuffers t)))
#+END_SRC

**** Dashboard

#+BEGIN_SRC elisp
(td/add-setup 'dashboard

  (setq dashboard-startup-banner 'logo
        dashboard-projects-backend 'project-el
        dashboard-items '((projects . 5)
                          (recents . 5)
                          (agenda . 5)
                          (bookmarks . 5))
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-center-content t
        dashboard-set-init-info t)
  (when (daemonp)
    (setq initial-buffer-choice
          (lambda () (get-buffer "*dashboard*"))))
  (dashboard-setup-startup-hook))
#+END_SRC

**** Diff-hl

Show me the diffs in the fringe!

#+BEGIN_SRC elisp
(td/add-setup 'diff-hl
  (setq diff-hl-show-staged-changes nil)
  (global-diff-hl-mode)
  (with-eval-after-load 'magit
    (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)))
#+END_SRC

**** Eldoc Box

#+BEGIN_SRC elisp
(setq eldoc-echo-area-use-multiline-p nil
      eldoc-idle-delay 0.75)

(td/add-setup 'eldoc-box
  (require 'eldoc-box)
  (global-set-key (kbd "C-c i") #'eldoc-box-help-at-point)
  (define-key eglot-mode-map (kbd "C-c I") #'eldoc-box-eglot-help-at-point))
#+END_SRC

**** Elfeed
RSS Reader :D

#+BEGIN_SRC elisp
(td/add-setup 'elfeed
  (global-set-key (kbd "M-o e ") #'elfeed))

(td/add-setup 'elfeed-org
  (with-eval-after-load 'elfeed
    (elfeed-org)
    (setq rmh-elfeed-org-files '("~/Org/elfeed.org"))))
#+END_SRC

**** Embrace
Embrace is the Emacs equivalent of "vim surround". It make it easy to swap out surrounding elements.

#+BEGIN_SRC elisp
(defun td/smart-embrace ()
  (interactive)
  (if (region-active-p)
      (embrace-add)
    (embrace-commander)))

(td/add-setup 'embrace
  (global-set-key (kbd "C-S-s") #'td/smart-embrace))
#+END_SRC

**** COMMENT Ement
A Matrix client for Emacs.

#+BEGIN_SRC elisp
(defun td/matrix-connect ()
  "Connect to Matrix via Ement & Pantalaimon."
  (interactive)
  (ement-connect
   :user-id "@trevdev:matrix.org"
   :password (password-store-get "Personal/matrix.org")
   :uri-prefix "http://localhost:8009"))

;; Dependency for ement that is missing from Melpa
(unless (package-installed-p 'taxy)
  (package-install 'taxy t))

;; Dependency for ement that is missing from Melpa
(unless (package-installed-p 'taxy-magit-section)
  (package-install 'taxy t))

(unless (package-installed-p 'ts)
  (package-install 'ts t))

(quelpa-get plz :fetcher github :repo "alphapapa/plz.el")
(quelpa-get ement :fetcher github :repo "alphapapa/ement.el")

(td/add-setup 'plz)
(td/add-setup 'ement
  (setq print-circle t))
#+END_SRC

**** ERC

#+BEGIN_SRC elisp
(setq erc-autojoin-channels-alist
      '(("Libera.Chat" "#emacs" "#guix" "#systemcrafters")))
(global-set-key (kbd "M-o i")
                #'(lambda () (interactive)
                    (erc-tls :server "irc.libera.chat"
                             :port 7000
                             :nick "trevdev"
                             :password (password-store-get
                                        "Biz/libera.chat"))))
#+END_SRC

**** COMMENT Evil

#+BEGIN_SRC elisp
(defun td/evil-bind-keys ()
  "Create some extra evil bindings."
  (evil-set-leader 'normal (kbd "\\"))
  ;; Avy
  (evil-define-key 'normal 'global (kbd "<leader>s") 'avy-goto-char-timer)
  ;; General
  (evil-define-key 'normal 'global (kbd "<leader>ff") 'find-file)
  (evil-define-key 'normal 'global (kbd "<leader>fg") 'project-find-file)
  (evil-define-key 'normal 'global (kbd "<leader>fb") 'consult-buffer)
  (evil-define-key 'normal 'global (kbd "<leader>m") 'mu4e)
  (evil-define-key 'normal 'global (kbd "<leader>e") 'elfeed)
  ;; LSP
  (evil-define-key 'normal lsp-mode-map (kbd "K") 'lsp-ui-doc-glance)
  ;; Org
  (evil-define-key 'normal org-mode-map (kbd "<leader>ci") 'org-clock-in)
  (evil-define-key 'normal org-mode-map (kbd "<leader>co") 'org-clock-out)
  (evil-define-key 'normal 'global (kbd "<leader>cg") 'org-clock-goto)
  ;; Magit
  (evil-define-key 'normal 'global (kbd "gs") 'magit))

(td/add-setup 'evil
  (require 'evil)
  (setq evil-undo-system 'undo-tree
        evil-visual-state-cursor 'hbar)
  (td/evil-bind-keys)
  (evil-mode 1))

(td/add-setup 'evil-surround
  (with-eval-after-load 'evil
    (global-evil-surround-mode 1)))

(td/add-setup 'evil-commentary
  (with-eval-after-load 'evil
    (add-hook 'prog-mode-hook #'evil-commentary-mode)))

(td/add-setup 'evil-goggles
  (with-eval-after-load 'evil
    (evil-goggles-mode)))
#+END_SRC
**** Expand Region
It just makes selecting text between sexps easy.

#+BEGIN_SRC elisp
(td/add-setup 'expand-region
  (global-set-key (kbd "C-=") #'er/expand-region))
#+END_SRC

**** Exec Path
It's silly that I need to do this, but I run Emacs in --daemon mode. I'm tired of my $PATH getting missed 1/2 the time.

#+BEGIN_SRC elisp
(td/add-setup 'exec-path-from-shell
  (exec-path-from-shell-initialize))
#+END_SRC

**** COMMENT God Mode

#+BEGIN_SRC elisp
(defun god/eol-insert ()
  "Move the cursor to the end-of-line and exit god mode."
  (interactive)
  (end-of-line)
  (god-local-mode -1))

(defun god/boi-insert ()
  "Move the cursor back-to-indentation and exit god mode."
  (interactive)
  (back-to-indentation)
  (god-local-mode -1))

(defun god/change ()
  "Kill char/region and exit god mode."
  (interactive)
  (if (region-active-p)
      (kill-region (region-beginning) (region-end))
    (zap-to-char 1 (char-after)))
  (god-local-mode -1))

(defun god/join ()
  "Join the line below with the current line."
  (interactive)
  (next-line)
  (join-line))

(defun god/backward-symbol (num)
  "Move backward `NUM' symbols."
  (interactive "^p")
  (forward-symbol (- 0 (or (when (natnump num) num) 1))))

(defun god/open-above ()
  "Open a new line above the current line, put the point there."
  (interactive)
  (previous-line)
  (end-of-line)
  (newline-and-indent))

(defun god/open-below ()
  "Open a new line below the current line, put the point there."
  (interactive)
  (end-of-line)
  (newline-and-indent))

(defun god/cursor-toggle ()
  "Toggles the cursor between a box and bar while in or out of `god-mode'."
  (setq cursor-type (if (or god-local-mode buffer-read-only) 'box 'bar)))

(defvar god/keybinds '(("z" . repeat)
                       ("i" . god-local-mode)
                       ("f" . forward-word)
                       ("F" . forward-symbol)
                       ("b" . backward-word)
                       ("B" . god/backward-symbol)
                       ("o" . god/open-below)
                       ("O" . god/open-above)
                       ("A" . god/eol-insert)
                       ("I" . god/boi-insert)
                       ("C" . god/change)
                       ("J" . god/join)
                       ("[" . backward-paragraph)
                       ("]" . forward-paragraph)))

(td/add-setup 'god-mode
  (require 'god-mode-isearch)
  (god-mode)
  (god/cursor-toggle)
  (with-eval-after-load 'which-key
    (which-key-enable-god-mode-support))
  (dolist (mode '(vterm-mode
                  notmuch-hello-mode
                  notmuch-search-mode
                  notmuch-show-mode))
    (add-to-list 'god-exempt-major-modes mode))
  (global-set-key (kbd "<escape>") #'god-local-mode)
  (define-key isearch-mode-map (kbd "<escape>") #'god-mode-isearch-activate)
  (define-key god-mode-isearch-map (kbd "<escape>") #'god-mode-isearch-disable)
  (add-hook 'post-command-hook #'god/cursor-toggle)
  (td/bind-keys god/keybinds god-local-mode-map)
  (add-to-list 'emulation-mode-map-alists
               `((god-local-mode . ,god-local-mode-map))))
#+END_SRC

**** Goggles
Extra feedback for text changes.

#+BEGIN_SRC elisp
(td/add-setup 'goggles
  (td/add-hooks '(text-mode prog-mode) #'goggles-mode)
  (setq-default goggles-pulse t))
#+END_SRC

**** Hydra
A tool for making repetative chords less cumbersome

#+BEGIN_SRC elisp
(td/add-setup 'hydra
  (defhydra hydra-window (global-map "C-c o")
    "Hydra Windmove"
    ("e" windmove-right "Right")
    ("a" windmove-left "Left")
    ("p" windmove-up "Up")
    ("n" windmove-down "Down")
    ("o" other-window "Other"))

  (defhydra hydra-split (global-map "C-c p")
    "Hydra Split"
    ("v" split-window-right "Vertically")
    ("h" split-window-below "Horizontally")
    ("d" delete-window "Delete")
    ("=" enlarge-window "Enlarge")
    ("-" shrink-window "Shrink")
    ("b" balance-windows "Balance")
    ("D" delete-other-windows "Delete Others")))
#+END_SRC

**** Meow

#+BEGIN_SRC elisp
(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty
        meow-expand-hint-remove-delay 2.0
        meow-expand-exclude-mode-list '())
  (dolist (state '((notmuch-hello-mode . motion)
                   (notmuch-search-mode . motion)
                   (notmuch-tree-mode . motion)
                   (notmuch-show-mode . motion)))
    (add-to-list 'meow-mode-state-list state))
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet)
   ;; Custom keybinds
   '("i" . "C-c i")
   '("I" . "C-c I")
   (cons "P" project-prefix-map)
   '("e" . "C-c e"))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)
   '("S" . td/smart-embrace)
   '("=" . er/expand-region)))

(td/add-setup 'meow
  (require 'meow)
  (meow-setup)
  (meow-global-mode 1))
#+END_SRC

**** Magit
Magit is one of the biggest reasons why I fell in love with emacs. It's the best keyboard driven "TUI" abstraction of the git command line anywere, period. Better than Fugitive by far. Sorry, Tim Pope.

#+BEGIN_SRC elisp
(td/add-setup 'magit
  (global-set-key (kbd "M-o g") #'magit-status))
#+END_SRC

**** COMMENT Multiple Cursors

#+BEGIN_SRC elisp
(td/add-setup 'multiple-cursors
  (td/bind-keys '(("C-S-l" . mc/edit-lines)
                  ("C-." . mc/mark-next-like-this)
                  ("C-," . mc/mark-previous-like-this)
                  ("C->" . mc/skip-to-next-like-this)
                  ("C-<" . mc/skip-to-previous-like-this)
                  ("C-c C-." . mc/mark-all-like-this)
                  ("C-c C-?" . mc/mark-all-like-this-dwim)
                  ("C-c C-/" . mc/mark-all-in-region)
                  ("C-M-n" . mc/insert-letters)
                  ("C-M-a" . mc/insert-letters)) priority-mode-map))
#+END_SRC

**** Org
The greatest part of using Emacs is org-mode. It handles my agenda, my todo list, helps me prioritize tasks, track time and invoice clients.

***** Key Variables
I am using tags to help sort contexts within my agenda. Some people use categories for that. I technically do that, too, but I also use separate files. Filenames are categories by default, so there is less to configure when you use separate files.

#+BEGIN_SRC elisp
(defvar td/tag-list
  '((:startgroup)
    ("@home" . ?H)
    ("@work" . ?W)
    (:endgroup)
    ("foss" . ?f)
    ("gurps" . ?g)
    ("idea" . ?i))
  "The tags for org headlines.")
#+END_SRC

Next are my TODO key words. They are meant to be used as such:

- =TODO= A generic task or actionable thing.
- =NEXT= A planned task, something I am setting my mind to until it is done. There should be very few of these types of tasks so that I am setting achievable goals
- =PROJ= A project that may consist of many subtasks.
- =WAIT= The task that is held up by some pre-requesite or external factor
- =LOW= The task is a "maybe/someday" task. I'd like to see it done, but it's not a priority right now.
- =DONE= The task is completed
- =PASS= The task has been "passed along" or "delegated" to someone else. Considered 'done', just not by myself
- =CANC= The task has been cancelled or ended before completion

#+BEGIN_SRC elisp
(defvar td/todo-keywords
  '((sequence "TODO(t)" "NEXT(n)" "WAIT(w@/!)" "LOW(l)"
              "|" "DONE(d!)" "PASS(p@)" "CANC(k@)"))
  "A sequence of keywords for Org headlines.")
#+END_SRC

My org agenda commands & stuck projects. Currently a work in progress! I am reading David Allen's "[[https://gettingthingsdone.com/][Getting Things Done]]." I am attempting to shape my agenda to suit that system.

#+BEGIN_SRC elisp
(defvar td/org-agenda-commands
  '(("d" "Dashboard: Get things done!"
     ((agenda "" ((org-agenda-span 7)))
      (tags-todo "+PRIORITY=\"A\""
                 ((org-agenda-overriding-header "High Priority")
                  (org-agenda-skip-function
                   '(org-agenda-skip-entry-if 'todo '("WAIT")))))
      (todo "NEXT"
            ((org-agenda-overriding-header "Do Next")
             (org-agenda-max-todos nil)))
      (todo "WAIT"
            ((org-agenda-overriding-header "Follow Up")))
      (todo "TODO"
            ((org-agenda-overriding-header "Other Actionables")
             (org-agenda-skip-function
              '(org-agenda-skip-entry-if 'scheduled 'deadline))))
      )
     )
    ("l" "Backburner of low priority tasks"
     ((todo "LOW"
           ((org-agenda-overriding-header "Someday/Maybe"))))
     )
    )
  "Custom commands for Org Agenda.")
#+END_SRC

Capture templates! These help me collect information into Org files. Currently I only have 2 cookbook capture methods that are meant to be used with org-chef. See [[*Org mode extensions][extensions]] for how I extend org-mode.

#+BEGIN_SRC elisp
(defvar td/capture-templates '() "Base org-capture-templates.")
#+END_SRC

I usually stick to monospace sized fonts with the exception of Org files. I like the first 3 levels to be slightly larger than the rest, and progressively smaller. This helps me create a sense of urgency at the lower-level headers and it also improves readability.

***** Functions
Some fairly self-explanatory utility functions.

#+BEGIN_SRC elisp
(defvar td/org-scale-levels-enable nil
  "Whether or levels are scaled.")

(defun td/org-scale-levels-toggle (&optional enable)
  "Enlarge org levels for more readability."
  (interactive)
  (let ((scaled (or enable (not td/org-scale-levels-enable))))
    (dolist (face '((org-level-1 . (if scaled 1.2 1.0))
                    (org-level-2 . (if scaled 1.1 1.0))
                    (org-level-3 . (if scaled 1.05 1.0))))
      (set-face-attribute (car face) nil :weight 'semi-bold :height (eval (cdr face))))
    (setq td/org-scale-levels-enable scaled)))

(defun td/org-hook ()
  "Do some stuff on org mode startup."
  (org-clock-persistence-insinuate)
  (org-indent-mode)
  (setq-local line-spacing 0.1))

(defun td/org-append-templates (templates)
  (setq org-capture-templates (append org-capture-templates templates)))
#+END_SRC

***** Apply Configuration

#+BEGIN_SRC elisp
(add-hook 'org-mode-hook #'td/org-hook)
(global-set-key (kbd "C-c a") #'org-agenda)
(define-key org-mode-map (kbd "C-c t") #'org-table-export)

(require 'ox-md nil t)
(setq org-fontify-quote-and-verse-blocks t
      org-attach-auto-tag "attach"
      org-directory "~/Org"
      org-archive-location "archives/%s_archive::"
      org-log-done 'time
      org-log-into-drawer t
      org-enforce-todo-dependencies t
      org-src-preserve-indentation t
      org-clock-persist 'history
      org-agenda-block-separator "──────────"
      org-agenda-tags-column -80
      org-duration-format '(("h" . nil) (special . 2))
      org-clock-total-time-cell-format "%s"
      org-agenda-files '("~/Org/agenda")
      org-tag-alist td/tag-list
      org-todo-keywords td/todo-keywords
      org-clock-sound "~/.config/emacs/inspectorj_bell.wav"
      org-timer-default-timer "25"
      org-agenda-custom-commands td/org-agenda-commands
      org-stuck-projects '("/PROJ-DONE" ("TODO" "NEXT") nil "- \\[ \\]")
      org-capture-templates td/capture-templates
      org-catch-invisible-edits 'show-and-error
      org-special-ctrl-a/e t
      org-insert-heading-respect-content t)

(add-to-list 'display-buffer-alist '("\\*Org Agenda*\\*"
                                       (display-buffer-in-direction)
                                       (direction . right)
                                       (window-width . 0.50)
                                       (window-height . fit-window-to-buffer)))
#+END_SRC

***** Extending Org Mode
Extending org-mode with some interesting packages.

****** org-alert
Libnotify alerts for Agenda alerts.

#+BEGIN_SRC elisp
(td/add-setup 'org-alert
  (require 'org-alert)
  (setq alert-default-style 'libnotify
        org-alert-interval 7200
        org-alert-notify-cutoff 60
        org-alert-notification-title "Org Agenda")
  (org-alert-enable))
#+END_SRC

****** org-chef
[[https://github.com/Chobbes/org-chef][Org-chef]] is a must have if you enjoy cooking. You can just use =M-x org-chef-insert-recipe= in whatever cookbook file, or the capture templates.

#+BEGIN_SRC elisp
(td/add-setup 'org-chef
  (td/org-append-templates
   '(("c" "Cookbook" entry (file "~/Projects/os-cookbook/src/cookbook.org")
      "%(org-chef-get-recipe-from-url)"
      :empty-lines 1)
     ("m" "Manual Cookbook" entry
      (file "~/Projects/os-cookbook/src/cookbook.org")
      (eval (concat "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n"
              "  :servings:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n"
              "  :END:\n** Ingredients\n   %?\n** Directions\n\n"))))))
#+END_SRC

****** ox-gfm
Get access to Github Flavored Markdown

#+BEGIN_SRC elisp
(td/add-setup 'ox-gfm
  (with-eval-after-load 'ox
    (require 'ox-gfm)))
#+END_SRC

****** ox-hugo
I like org-publish, but there are some files (like my cookbook) that I would like to keep in one document, as it is a capture file, and be able to easily publish it into a list of "posts".

#+BEGIN_SRC elisp
(td/add-setup 'ox-hugo
  (with-eval-after-load 'ox
    (require 'ox-hugo)))
#+END_SRC

****** COMMENT org-modern

#+begin_src lisp
(td/add-setup 'org-modern
  (setq org-pretty-entities t
        org-ellipsis "…"
        org-agenda-current-time-string "⭠ now ────────────────────────────"
        org-hide-emphasis-markers t
        org-auto-align-tags nil
        org-tags-column 0
        org-auto-align-tags nil)
  (global-org-modern-mode))
  #+end_src

****** org-present
A tiny package for presenting with org-mode.

#+BEGIN_SRC elisp
(td/add-setup 'org-present
  (with-eval-after-load 'org-present
    (add-hook 'org-present-mode-hook
              #'(lambda ()
                  (org-present-big)
                  (td/org-scale-levels-toggle t)
                  (org-display-inline-images)
                  (blink-cursor-mode -1)
                  (org-present-hide-cursor)
                  (org-present-read-only)))
    (add-hook 'org-present-mode-quit-hook
              #'(lambda()
                  (org-present-small)
                  (org-remove-inline-images)
                  (org-present-show-cursor)
                  (blink-cursor-mode 1)
                  (td/org-scale-levels-toggle)
                  (org-present-read-write)))))
#+END_SRC

****** org-roam

#+BEGIN_SRC elisp
(defvar td/roam-capture-templates
  '(("d" "default" plain "%?"
  :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                     "#+TITLE: ${title}\n#+DATE: %U\n")
  :unnarrowed t)))

(defvar td/roam-capture-daily
  '(("d" "default" entry "* %<%I:%M %p>: %?"
     :target (file+head "%<%Y-%m-%d>.org"
                        "#+TITLE: %<%a, %b %d %Y>\n"))))

(defvar td/roam-display-template
  (concat "${title:*} "
          (propertize "${tags:28}" 'face 'org-tag)))

(td/add-setup 'org-roam
  (require 'org-roam-dailies)
  (setq org-roam-directory "~/Org/roam")
  (td/bind-keys '(("C-c r t" . org-roam-buffer-toggle)
                  ("C-c r f" . org-roam-node-find)
                  ("C-c r i" . org-roam-node-insert)
                  ("C-c r c" . org-roam-capture)
                  ("C-c r d i" . org-roam-dailies-capture-today)
                  ("C-c r d t" . org-roam-dailies-goto-today)
                  ("C-c r d y" . org-roam-dailies-goto-yesterday)
                  ("C-c r d d" . org-roam-dailies-goto-date)))
  (setq org-roam-capture-templates td/roam-capture-templates
        org-roam-dailies-capture-templates td/roam-capture-daily
        org-roam-node-display-template td/roam-display-template
        org-roam-db-node-include-function
        (lambda ()
          (not (member "attach" (org-get-tags)))))
  (add-to-list 'display-buffer-alist '("\\*org-roam\\*"
                                       (display-buffer-in-direction)
                                       (direction . right)
                                       (window-width . 0.33)
                                       (window-height . fit-window-to-buffer)))
  (org-roam-setup))
#+END_SRC

****** org-roam-ui

#+BEGIN_SRC elisp
(td/add-setup 'org-roam-ui
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+END_SRC

***** TODO Custom Clock Table
I wanted a neat and tidy way to lay out the hours that I've worked, vs how much effort they should have taken & what that time should be worth when I invoice. I feel like this table is more useful for reporting billable hours and invoicing.

Task:
- [ ] Re-work this into its own package. It's big and worth sharing on its own.

#+BEGIN_SRC elisp
(defcustom td/billable-rate 80
  "The billable rate for calculating 'td/custom-clocktable"
  :type `integer
  :group 'org)

(defun td/custom-clocktable-indent (level)
  "Create an indent based on org LEVEL"
  (if (= level 1) ""
    (concat (make-string (1- level) ?—) " ")
    ))

(defun td/custom-clocktable-get-prop (key props)
  "Get a specific value using a KEY from a list of PROPS"
  (cdr (assoc key props)))

(defun td/minutes-to-billable (minutes &optional rate)
  "Get the amount in dollers that a number of MINUTES is worth"
  (let* ((hours (/ (round (* (/ minutes 60.0) 100)) 100.0))
         (amount (* hours (cond ((numberp rate) rate)
                                ((numberp td/billable-rate) td/billable-rate)
                                (0))))
         (billable (/ (round (* amount 100)) 100.0)))
    billable))

(defun td/emph-str (string &optional emph)
  "Emphasize a STRING if EMPH is set"
  (if emph
      (format "*%s*" string)
    string))

(defun td/custom-clocktable (ipos tables params)
  "An attempt to clock my voltage time, my way"
  (let* ((lang (or (plist-get params :lang) "en"))
         (block (plist-get params :block))
         (emph (plist-get params :emphasize))
         (header (plist-get params :header))
         (properties (or (plist-get params :properties) '()))
         (comments-on (member "Comment" properties))
         (formula (plist-get params :formula))
         (rate (plist-get params :rate))
         (has-formula (cond ((and formula (stringp formula))
                             t)
                            (formula (user-error "Invalid :formula param"))))
         (effort-on (member "Effort" properties)))
    (goto-char ipos)

    (insert-before-markers
     (or header
         ;; Format the standard header.
         (format "#+CAPTION: %s %s%s\n"
                 (org-clock--translate "Clock summary at" lang)
                 (format-time-string (org-time-stamp-format t t))
                 (if block
                     (let ((range-text
                            (nth 2 (org-clock-special-range
                                    block nil t
                                    (plist-get params :wstart)
                                    (plist-get params :mstart)))))
                       (format ", for %s." range-text))
                   "")))
     "| Task " (if effort-on "| Est" "")
     "| Time | Billable"
     (if comments-on "| Comment" "") "\n")
    (let '(total-time (apply #'+ (mapcar #'cadr tables)))
      (when (and total-time (> total-time 0))
        (pcase-dolist (`(, file-name , file-time , entries) tables)
          (when (and file-time (> file-time 0))
            (pcase-dolist (`(,level ,headline ,tgs ,ts ,time ,props) entries)
              (insert-before-markers
               (if (= level 1) "|-\n|" "|")
               (td/custom-clocktable-indent level)
               (concat (td/emph-str headline (and emph (= level 1))) "|")
               (if-let* (effort-on
                         (eft (td/custom-clocktable-get-prop "Effort" props))
                         (formatted-eft (org-duration-from-minutes
                                         (org-duration-to-minutes eft))))
                   (concat (td/emph-str formatted-eft (and emph (= level 1)))
                           "|")
                 (if effort-on "|"
                   ""))
               (concat (td/emph-str
                        (org-duration-from-minutes time)
                        (and emph (= level 1))) "|")
               (concat (td/emph-str
                        (format "$%.2f" (td/minutes-to-billable time rate))
                        (and emph (= level 1))) "|")
               (if-let* (comments-on
                         (comment
                          (td/custom-clocktable-get-prop "Comment" props)))
                   (concat comment "\n")
                 "\n")))))
        (let ((cols-adjust
               (if (member "Effort" properties)
                   2
                 1)))
          (insert-before-markers
           (concat "|-\n| "
                   (td/emph-str "Totals" emph)
                   (make-string cols-adjust ?|))
           (concat (td/emph-str
                    (format "%s" (org-duration-from-minutes total-time)) emph)
                   "|")
           (concat (td/emph-str
                    (format "$%.2f" (td/minutes-to-billable total-time rate))
                    emph) "|" ))
          (when has-formula
            (insert "\n#+TBLFM: " formula)))))
    (goto-char ipos)
    (skip-chars-forward "^|")
    (org-table-align)
    (when has-formula (org-table-recalculate 'all))))

(defun td/clocktable-format-toggle ()
  (interactive)
  (if (equal org-duration-format '((special . h:mm)))
      (setq-local org-duration-format '(("h" . nil) (special . 2)))
    (setq-local org-duration-format '((special . h:mm))))
  (org-ctrl-c-ctrl-c))
#+END_SRC

Here's an example:
#+BEGIN: clocktable :scope ("clocktable-example.org") :maxlevel 3 :properties ("Comment" "Effort") :formatter td/custom-clocktable
#+CAPTION: Clock summary at [2022-03-03 Thu 13:08]
| Task              | Est   | Time   | Billable | Comment                |
|-------------------+-------+--------+----------+------------------------|
| Client            |       | 8.00h  | $520.00  |                        |
| — Task B          |       | 2.00h  | $130.00  | This is taking a while |
| — Task A          |       | 6.00h  | $390.00  |                        |
|-------------------+-------+--------+----------+------------------------|
| Client B          |       | 12.43h | $807.95  |                        |
| — Special Project |       | 12.00h | $780.00  |                        |
| —— Task C         | 9.00h | 8.00h  | $520.00  |                        |
| —— Task D         |       | 4.00h  | $260.00  |                        |
| — Unrelated Task  |       | 0.43h  | $27.95   |                        |
|-------------------+-------+--------+----------+------------------------|
| Totals            |       | 20.43h | $1327.95 |                        |
#+END

**** COMMENT Mu4e
Setting up mu4e with contexts feels like a pretty massive process. I decided to leave my
context settings out of this source-controlled repository as to keep some more sensitive
info off of Github. [[https://www.djcbsoftware.nl/code/mu/mu4e/Contexts.html][Contexts]] are well documented if you need a hand with them.

Also, If you need a good starting point with mu4e, I strongly suggest checking out [[https://www.youtube.com/watch?v=yZRyEhi4y44&list=PLEoMzSkcN8oM-kA19xOQc8s0gr0PpFGJQ][System Crafters]].

#+BEGIN_SRC elisp
(require 'mu4e)

(defun td/get-mail-signature(file)
  "Retrieve the signature file from the signatures directory.
  Mostly used in contexts configuration."
  (let ((dir "/home/trevdev/.local/mail/signatures/"))
    (with-temp-buffer
      (insert-file-contents (format "%s%s" dir file))
      (buffer-string))))

(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")

(global-set-key (kbd "M-o m") #'mu4e)

(setq mu4e-maildir "~/.local/mail"
      mu4e-change-filenames-when-moving t
      mu4e-update-interval (* 10 60)
      mu4e-get-mail-command "mbsync -a"
      mail-user-agent 'mu4e-user-agent
      mu4e-maildir-shortcuts '((:maildir "/fastmail/INBOX" :key ?p)
                               (:maildir "/fastmail/Business" :key ?b)
                               (:maildir "/fastmail/Tango" :key ?t)
                               (:maildir "/voltage/INBOX" :key ?v))
      message-send-mail-function 'smtpmail-send-it
      mu4e-attachment-dir "~/Downloads"
      mu4e-context-policy 'pick-first
      mu4e-compose-format-flowed t
      mu4e-compose-signature-auto-include nil
      mml-secure-openpgp-encrypt-to-self t)

(setq mu4e-contexts (eval (let ((contexts "~/.config/emacs/mu4e-contexts.el"))
                            (when (file-exists-p contexts)
                              (with-temp-buffer
                                (insert-file-contents contexts)
                                (read (current-buffer)))))))

(add-to-list 'mu4e-bookmarks
             '(:name "Flagged" :key ?f :query "flag:flagged"))
(add-to-list 'mu4e-bookmarks
             '(
               :name "New Mail"
               :key ?n
               :query "flag:unread AND NOT maildir:/fastmail/Spam"
               )
             )

(td/add-setup 'org-msg
  (setq org-msg-options "html-postamble:nil num:nil ^:{} toc:nil author:nil
         email:nil \\n:t"
        org-msg-startup "hidestars indent inlineimages"
        org-msg-greeting-fmt "\nHi%s,\n\n"
        org-msg-greeting-name-limit 3
        org-msg-default-alternatives '((new            . (text html))
                                       (reply-to-html  . (text html))
                                       (reply-to-text  . (text)))))

(autoload 'org-mime-edit-mail-in-org-mode "org-mime"
  "Edit a message in org-mode")

(td/add-setup 'org-mime
  (td/bind-keys '(("C-c C-o" . org-mime-edit-mail-in-org-mode)
                  ("C-c C-h" . org-mime-htmlize)) message-mode-map))
(quelpa-get org-contacts
            :fetcher git
            :url "https://repo.or.cz/org-contacts.git")

(td/add-setup 'org-contacts
  (require 'org-contacts)
  (setq org-contacts-files '("~/Org/contacts.org")))
#+END_SRC

I'd like to get alerts, so let's use =mu4e-alert= for that.

#+BEGIN_SRC elisp
(td/add-setup 'mu4e-alert
  (mu4e-alert-set-default-style 'libnotify)
  (add-hook 'after-init-hook #'(lambda nil
                                 (mu4e-alert-enable-notifications)
                                 (mu4e-alert-enable-mode-line-display))))
#+END_SRC

**** Ledger
Knowing what resources you have at your disposal and learning how to budget are powerful things.

#+BEGIN_SRC elisp
(td/add-setup 'ledger-mode
  (setq ledger-use-native-highlighting t))
#+END_SRC

**** Vterm
A "normal" terminal for Emacs

#+BEGIN_SRC elisp
;; Currently installed via guix system
;; (td/add-setup 'vterm)
;; (td/add-setup 'multi-vterm)
;; (td/add-setup 'verm-toggle)

(td/bind-keys '(("C-c v t" . multi-vterm)
                ("C-c v n" . multi-vterm-next)
                ("C-c v p" . multi-vterm-prev)
                ("C-c v d" . multi-vterm-dedicated-toggle)
                ("C-c v P" . multi-vterm-project)))
#+END_SRC

**** Notmuch
Notmuch is a really impressive way to read and organize mail via tagging files. It works really quickly and the configuration is really flexible.

First, some general mail configs:
#+BEGIN_SRC elisp
(setq send-mail-function 'sendmail-send-it
      sendmail-program "~/.guix-home/profile/bin/msmtp"
      message-directory "~/.local/share/mail"
      mail-specify-envelope-from t
      mail-envelope-from 'header
      message-sendmail-envelope-from 'header
      message-signature-directory "~/.local/share/mail/signatures"
      message-signature-file "default")
#+END_SRC

Now, to configure Notmuch:
#+BEGIN_SRC elisp
(td/add-setup 'notmuch
              (require 'notmuch))

(setq notmuch-fcc-dirs
      '(("trev@fastmail.com" . "fastmail/Sent")
        ("trev@trevdev.ca"   . "fastmail/Sent")
        ("tn@eml.cc"         . "fastmail/Sent")
        ("trevor@voltagenewmedia.com" . "voltage/Sent"))
      notmuch-saved-searches '(
                               (:name "todo"
                                      :query "tag:todo"
                                      :key "t"
                                      :sort-order newest-first)
                               (:name "flagged"
                                      :query "tag:flagged"
                                      :key "f"
                                      :sort-order newest-first)
                               (:name "personal"
                                      :query "not tag:work"
                                      :count-query "not tag:work and tag:unread"
                                      :key "p"
                                      :sort-order newest-first)
                               (:name "work"
                                      :query "tag:work"
                                      :count-query "tag:work and tag:unread"
                                      :key "w"
                                      :sort-order newest-first)
                               (:name "drafts"
                                      :query "tag:draft"
                                      :key "d"
                                      :sort-order newest-first)
                               (:name "sent"
                                      :query "tag:sent"
                                      :count-query "tag:nil"
                                      :key "s"
                                      :sort-order newest-first)
                               (:name "all mail"
                                      :query "*"
                                      :count-query "tag:nil"
                                      :key "a"
                                      :sort-order newest-first))
      notmuch-archive-tags '("+archive" "-inbox")
      notmuch-tagging-keys '(("a" notmuch-archive-tags "Archive")
                             ("u" notmuch-show-mark-read-tags "Mark read")
                             ("f" ("+flagged") "Flag")
                             ("s" ("+spam" "-inbox") "Mark as spam")
                             ("d" ("+deleted" "-inbox") "Delete"))
      notmuch-show-logo nil
      notmuch-mua-user-agent-function 'notmuch-mua-user-agent-full
      notmuch-hello-thousands-separator ",")

(global-set-key (kbd "M-o m") #'notmuch)

(defun td/specify-msmtp-account ()
  (save-excursion
    (beginning-of-buffer)
    (search-forward "From:")
    (setq message-sendmail-extra-arguments
          (if (string-match-p (regexp-quote "voltagenewmedia")
                              (thing-at-point 'line t))
              (list "-a" "voltage")
            (list "-a" "default")))))

(add-hook 'notmuch-mua-send-hook #'td/specify-msmtp-account)
#+END_SRC

Some extras for mime and contacts:
#+BEGIN_SRC elisp
(autoload 'org-mime-edit-mail-in-org-mode "org-mime"
  "Edit a message in org-mode")

(td/add-setup 'org-mime
  (td/bind-keys '(("C-c C-o" . org-mime-edit-mail-in-org-mode)
                  ("C-c C-h" . org-mime-htmlize)) message-mode-map))

(quelpa-get org-contacts
            :fetcher git
            :url "https://repo.or.cz/org-contacts.git")

(td/add-setup 'org-contacts
  (require 'org-contacts)
  (setq org-contacts-files '("~/Org/contacts.org")))

#+END_SRC

**** Password Store

#+BEGIN_SRC elisp
(td/add-setup 'password-store
  (td/bind-keys '(("C-c p c" . password-store-copy)
                  ("C-c p f" . password-store-copy-field)
                  ("C-c p i" . password-store-insert)
                  ("C-c p g" . password-store-generate))))
#+END_SRC

**** Sensitive Mode
Inspired from a script written by [[https://anirudhsasikumar.net/blog/2005.01.21.html][Anirudh Sasikumar]]. It has been adapted to accomodate undo-tree. This prevents emacs from generating unencrypted backups & autosave data from =.gpg= files.

#+BEGIN_SRC elisp
(define-minor-mode sensitive-mode
  "A minor-mode for preventing auto-saves and back-ups for encrypted files."
  :global nil
  :lighter " Sensitive"
  :init-value nil
  (if (symbol-value sensitive-mode)
      (progn
        ;; disable backups
        (set (make-local-variable 'backup-inhibited) t)
        ;; disable auto-save
        (if auto-save-default
            (auto-save-mode -1))
        ;; disable undo-tree history(?)
        (when (bound-and-true-p undo-tree-mode)
          (undo-tree-mode -1)))
    (kill-local-variable 'backup-inhibited)
    (if auto-save-default
        (auto-save-mode 1))
    (when (bound-and-true-p global-undo-tree-mode)
      (undo-tree-mode 1))))
#+END_SRC

**** RG

#+BEGIN_SRC elisp
(td/add-setup 'rg
  (rg-enable-default-bindings))
#+END_SRC

**** COMMENT Undo-Tree

A great tool for turning back the clock on a buffer. Especially when git commits are overlooked.

#+BEGIN_SRC elisp
(td/add-setup 'undo-tree
  (global-undo-tree-mode)
  (add-to-list
   'undo-tree-history-directory-alist
   '(".*" . "~/.emacs.d/undo-tree/")))
#+END_SRC

**** Visual Fill Column

Creates a fake "fill column" to wrap text around. Makes reading documents more visually appealing without breaking text into newlines.

#+BEGIN_SRC elisp
(defun td/visual-fill-setup ()
  "Center the column 100 characters wide."
  (setq-local visual-fill-column-width 100
              visual-fill-column-center-text nil)
  (visual-fill-column-mode 1))

(td/add-setup 'visual-fill-column
  (define-key org-mode-map (kbd "C-c v") #'visual-fill-column-mode)
  (add-hook 'org-mode-hook #'td/visual-fill-setup))
#+END_SRC

**** Which-key
What the heck was that keybind again? If you can remember how it starts, which-key can help you find the rest.

#+BEGIN_SRC elisp
(td/add-setup 'which-key
  (which-key-mode))
#+END_SRC

*** Syntax Support
This section is for syntax highlighting and language specific tooling.

**** Clojure
This configuration includes clojure-mode and cider. [[* LSP Mode][LSP Mode]] can automatically install and run the language server if I feel I need one.

#+BEGIN_SRC elisp
(td/add-setup 'clojure-mode
  (td/auto-mode '(("\\.clj\\'" . clojure-mode))))

(td/add-setup 'cider)
#+END_SRC

**** Crontab Mode

#+BEGIN_SRC elisp
(td/add-setup 'crontab-mode)
#+END_SRC

**** CSS/SCSS

#+BEGIN_SRC elisp
(add-hook 'css-mode-hook #'(lambda () (setq-local css-indent-offset 2
                                                  tab-width 2)))
#+END_SRC

**** Eglot
Eglot - the rival LSP client to the infamous =lsp-mode=. Eglot claims to be leaner, faster and less intense.

#+BEGIN_SRC elisp
(td/add-setup 'eglot
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 '(php-mode . ("intelephense" "--stdio")))
    (add-to-list 'eglot-server-programs
                 '(svelte-mode . ("svelteserver" "--stdio")))
    (add-to-list 'eglot-server-programs
                 '(shopify-mode
                   . ("theme-check-language-server" "--stdio")))

    (defvar td/eglot-funcs
      (let ((map (make-sparse-keymap)))
        (td/bind-keys '(("r" . eglot-rename)
                        ("d" . eglot-find-typeDefinition)
                        ("D" . eglot-find-declaration)
                        ("f" . eglot-format)
                        ("F" . eglot-format-buffer)
                        ("R" . eglot-reconnect)) map)
        map) "Custom keybinds for eglot functions. \\{td/eglot-funcs}")
    (fset 'td/eglot-funcs td/eglot-funcs)
    (define-key eglot-mode-map (kbd "C-c e") 'td/eglot-funcs)

    (setq eglot-events-buffer-size 0
          eglot-send-changes-idle-time 0.7
          eglot-autoshutdown t)

    (add-hook 'eglot-managed-mode-hook
              (lambda ()
                "Make sure Eldoc will show us all of the feedback at point."
                (setq-local eldoc-documentation-strategy
                            #'eldoc-documentation-compose)))))
#+END_SRC

**** Emmet
 ~.Emmet[data-love="true"]~

#+BEGIN_SRC elisp
(td/add-setup 'emmet-mode
  (setq emmet-expand-jsx-className t)
  (td/add-hooks '(sgml-mode
                  css-mode
                  web-mode
                  svelte-mode) #'emmet-mode))
#+END_SRC

**** COMMENT Flycheck

#+BEGIN_SRC elisp
(td/add-setup 'flycheck
  (td/add-hooks '(emacs-lisp-mode prog-mode ledger-mode) #'flycheck-mode)
  (global-set-key (kbd "C-c f") #'flycheck-mode)
  (with-eval-after-load 'flycheck
    (define-fringe-bitmap 'flycheck-fringe-bitmap-caret
      (vector #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b10000000
              #b11000000
              #b11100000
              #b11110000
              #b11100000
              #b11000000
              #b10000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000))
    (setq flycheck-checker-error-threshold 1000)
    (flycheck-define-error-level
        'error
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-caret
      :fringe-face 'flycheck-fringe-error
      :error-list-face 'flycheck-error-list-error)
    (flycheck-define-error-level
        'warning
      :severity 100
      :compilation-level 1
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-caret
      :fringe-face 'flycheck-fringe-warning
      :warning-list-face 'flycheck-warning-list-warning)
    (flycheck-define-error-level
        'info
      :severity 100
      :compilation-level 1
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-caret
      :fringe-face 'flycheck-fringe-info
      :info-list-face 'flycheck-info-list-info)))

(td/add-setup 'flycheck-ledger)
#+END_SRC

**** Flymake
The built-in linting package.

#+BEGIN_SRC elisp
(define-fringe-bitmap 'small-right-triangle
  (vector #b00000000
          #b00000000
          #b00000000
          #b00000000
          #b00000000
          #b10000000
          #b11000000
          #b11100000
          #b11110000
          #b11100000
          #b11000000
          #b10000000
          #b00000000
          #b00000000
          #b00000000
          #b00000000
          #b00000000))

(setq flymake-note-bitmap '(small-right-triangle compilation-info)
      flymake-error-bitmap '(small-right-triangle compilation-error)
      flymake-warning-bitmap '(small-right-triangle compilation-warning))
#+END_SRC

**** GoLang

#+BEGIN_SRC elisp
(td/add-setup 'go-mode
  (td/auto-mode '(("\\.go\\'" . go-mode))))
#+END_SRC

**** COMMENT LSP Mode

#+BEGIN_SRC elisp
(td/add-setup 'lsp-mode
  (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)

  (setq lsp-keymap-prefix "C-c L")
  (setq lsp-log-io nil
        lsp-enable-folding nil
        lsp-clients-typescript-server-args '("--stdio"
                                             "--tsserver-log-file"
                                             "/dev/stderr")
        lsp-auto-guess-root t
        lsp-keep-workspace-alive nil
        lsp-eldoc-enable-hover nil)

  (with-eval-after-load 'lsp-mode
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection
                                       "theme-check-language-server")
                      :activation-fn (lsp-activate-on "shopify")
                      :server-id 'theme-check))
    (add-to-list
     'lsp-file-watch-ignored-directories "[/\\]env' [/\\]__pycache__'")
    (add-to-list 'lsp-language-id-configuration
                 '(shopify-mode . "shopify"))))

(td/add-setup 'consult-lsp)
#+END_SRC

**** Lua Mode

#+BEGIN_SRC elisp
(td/add-setup 'lua-mode
  (td/auto-mode '(("\\.lua\\'" . #'lua-mode))))
#+END_SRC

**** Markdown
The free software documentation language of the Internet.

#+BEGIN_SRC elisp
(td/add-setup 'markdown-mode
  (td/auto-mode '(("README\\.md\\'" . gfm-mode)
                  ("\\.md\\'" . markdown-mode)
                  ("\\.markdown\\'" . markdown-mode))))
#+END_SRC

**** Nim

#+BEGIN_SRC elisp
(td/add-setup 'nim-mode)
#+END_SRC

**** Paredit

#+BEGIN_SRC elisp
(td/add-setup 'paredit
  (td/add-hooks '(lisp-mode
                  scheme-mode
                  clojure-mode
                  emacs-lisp-mode) #'enable-paredit-mode))
#+END_SRC

**** PHP

#+BEGIN_SRC elisp
(defun td/get-intelephense-key ()
  "Get my intelephense license key."
  (with-temp-buffer
    (insert-file-contents "~/Documents/intelephense.txt")
    (buffer-string)))

(defun td/get-wordpress-stubs ()
  "The stubs required for a WordPress Project"
  (json-insert ["apache" "bcmath" "bz2" "calendar" "com_dotnet" "Core"
                "ctype" "curl" "date" "dba" "dom" "enchant" "exif"
                "fileinfo" "filter" "fpm" "ftp" "gd" "hash" "iconv" "imap"
                "interbase" "intl" "json" "ldap" "libxml" "mbstring"
                "mcrypt" "meta" "mssql" "mysqli" "oci8" "odbc" "openssl"
                "pcntl" "pcre" "PDO" "pdo_ibm" "pdo_mysql" "pdo_pgsql"
                "pdo_sqlite" "pgsql" "Phar" "posix" "pspell" "readline"
                "recode" "Reflection" "regex" "session" "shmop" "SimpleXML"
                "snmp" "soap" "sockets" "sodium" "SPL" "sqlite3" "standard"
                "superglobals" "sybase" "sysvmsg" "sysvsem" "sysvshm" "tidy"
                "tokenizer" "wddx" "xml" "xmlreader" "xmlrpc" "xmlwriter"
                "Zend OPcache" "zip" "zlib" "wordpress"]))

(td/add-setup 'php-mode)
#+END_SRC

**** Prettier
An opinionated way to clean up my web-dev code quickly.

#+BEGIN_SRC elisp
(td/add-setup 'prettier-js)
#+END_SRC

**** Python
 <3 Python

#+BEGIN_SRC elisp
(td/add-setup 'pyvenv)
#+END_SRC

**** Rainbow Delimiters
This comes in handier than you think it would. Especially with these (lisp '((config . files)))

#+BEGIN_SRC elisp
(td/add-setup 'rainbow-delimiters
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

**** Rainbow Mode
LSP-Mode covers making visual representations of hex color codes almost everywhere I need it. For everywhere else there's rainbow-mode

#+BEGIN_SRC elisp
(td/add-setup 'rainbow-mode)
#+END_SRC

**** Rust

#+BEGIN_SRC elisp
(defun td/rust-run-args (s)
  (interactive "sOptional Args:")
  (rust--compile (concat "%s run " s) rust-cargo-bin))

(td/add-setup 'rust-mode
  (with-eval-after-load 'rust-mode
    (td/bind-keys '(("C-c c r" . rust-run)
                    ("C-c c a r" . td/rust-run-args)) rust-mode-map)))
#+END_SRC

**** Scheme
There are many dialects of Scheme. I am choosing to organize mine in this subcategory.

Guile: GNU Ubiquitous Intelligent Language for Extensions
#+BEGIN_SRC elisp
(td/add-setup 'geiser-guile)
#+END_SRC

**** Shopify Mode
This is where I turn emacs into a usuable IDE for Shopify themes. I use regexp to tell emacs to use s/css-mode for css liquid, then register an LSP client for the [[https://shopify.dev/themes/tools/theme-check#using-theme-check-in-other-editors][theme-check-language-server]].

#+BEGIN_SRC elisp
;; Derive liquid-mode from web-mode
(define-derived-mode shopify-mode web-mode "Shopify"
  "Use web mode to highlight shopify liquid files")
(provide 'shopify-mode)
(add-to-list 'auto-mode-alist '("\\.liquid\\'" . shopify-mode))
(defvar liquid-electric-pairs '((?% . ?%))
  "Electric pairs for liquid syntax.")
(defun liquid-add-electric-pairs ()
  (setq-local electric-pair-pairs (append electric-pair-pairs
                                          liquid-electric-pairs)
              electric-pair-text-pairs electric-pair-pairs))
(add-hook 'shopify-mode-hook #'liquid-add-electric-pairs)
(add-to-list 'org-src-lang-modes '("liquid" . shopify))
#+END_SRC

**** Svelte
Fake-out a "svelte-mode" for the purposes of activating with the svelte-language-server. I'm extending web-mode because it highlights =.svelte= files well.

#+BEGIN_SRC elisp
(define-derived-mode svelte-mode web-mode "Svelte"
  "I just want web-mode highlighting with .svelte files")
(provide 'svelte-mode)
(add-to-list 'auto-mode-alist '("\\.svelte\\'" . svelte-mode))
#+END_SRC

**** Treesitter
Tree-sitter is an impressive project. It delivers exceptionally rich syntax highlighting for things like emacs/vim. A little tricky to theme, though, as it has a billion font lock faces and every tree-sitter syntax config may or may not use them the same way. I try to avoid looking a gift horse in the mouth.

#+BEGIN_SRC elisp
(td/add-setup 'tree-sitter
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
  (global-tree-sitter-mode))

(td/add-setup 'tree-sitter-langs)
#+END_SRC

**** TypeScript & JavaScript

#+BEGIN_SRC elisp
(setq js-indent-level 2)

(td/add-setup 'typescript-mode
  (setq typescript-indent-level 2))
#+END_SRC

**** VueJS

#+BEGIN_SRC elisp
(define-derived-mode vue-mode web-mode "VueJS"
  "I just want web-mode highlighting with .svelte files")
(provide 'vue-mode)
(add-to-list 'auto-mode-alist '("\\.vue\\'" . vue-mode))
#+END_SRC

**** Web Mode
There isn't a much better catch-all for web template syntax support than web-mode. It works well with Liquid syntax files. It also comes with it's own divergent, insane defaults that I have to choke out.

#+BEGIN_SRC elisp
(td/add-setup 'web-mode
  (td/auto-mode '(("\\.html\\'" . web-mode)))
  (setq web-mode-markup-indent-offset tab-width
        web-mode-code-markup-indent-offset tab-width
        web-mode-style-padding tab-width
        web-mode-script-padding tab-width
        web-mode-block-padding tab-width
        web-mode-enable-auto-indentation nil
        web-mode-enable-auto-pairing nil)
  (add-to-list 'org-src-lang-modes '("html" . web)))
#+END_SRC

**** YAML
YAML's a really nice way to configure software, containers and projects. I use it when I can.

#+BEGIN_SRC elisp
(td/add-setup 'yaml-mode
  (td/auto-mode '(("\\.yml\\'" . yaml-mode))))
#+END_SRC

**** Yasnippet
Snippets! They're helpful.

#+BEGIN_SRC elisp
(td/add-setup 'yasnippet
  (require 'yasnippet)
  (global-set-key (kbd "C-c ,") #'yas-expand)
  (setq yas-snippet-dirs '("~/.config/emacs/yasnippets"))
  (yas-reload-all))

(td/add-setup 'yasnippet-snippets)
#+END_SRC

*** Install & Configure Packages
See [[* Bootstrapping][bootstrapping]].

#+BEGIN_SRC elisp
(td/setup-packages)
#+END_SRC

** About This Config
This literate configuration is a labour of love from a man who changes his mind and mixes things up /often/.

I'm not sure it will ever be finished or perfect. At times, things may clunk. I will do my best to clunk them in another branch.

If you like this config the way you found it, make sure that you fork it or make note of which commit you preferred.

If you like it enough to drop me a tip, feel free to do so:

[[https://ko-fi.com/Y8Y34UWHH][https://ko-fi.com/img/githubbutton_sm.svg]]
[[https://liberapay.com/trev.dev/donate][https://liberapay.com/assets/widgets/donate.svg]]
BTC: bc1qwad2jlteldw644w4wfh28y6ju53zfp69nnswrq

*** Installation
If you've decided to fork this repository and wish to use it as-is, here are the steps you'll need to take.

*Note*: Config us currently set up for Emacs 29. Be sure to disable the weird bits, like [[* Performance Tweaks][compilation deferral]].

1. Clone this repository to =~/.config/emacs=.
2. Make sure you clear out any existing configs in =~/.emacs.d= and =rm -rf ~/.emacs.d/elpa= to clear your existing packages.

3. Symlink =init.el=, =early-init.el= and =config.el= into your =~/.emacs.d/= directory.
4. Run emacs for the first time.

*** Licenses
- For the [[file:inspectorj_bell.wav][bell sound]]: "Bell, Candle Damper, A (H4n).wav" by InspectorJ (www.jshaw.co.uk) of Freesound.org (Creative Commons - CC BY 3.0
